{"version":3,"file":"restApiRequest.js","sourceRoot":"","sources":["../../../../src/publish/restApiRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import * as https from \"https\"\nimport { RequestOptions } from \"https\"\nimport { IncomingMessage, ClientRequest } from \"http\"\nimport { addTimeOutHandler } from \"../util/httpRequest\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nexport function githubRequest<T>(path: string, token: string | null, data: { [name: string]: any; } | null = null, method: string = \"GET\"): BluebirdPromise<T> {\n  return request<T>(\"api.github.com\", path, token, data, method)\n}\n\nexport function bintrayRequest<T>(path: string, auth: string | null, data: { [name: string]: any; } | null = null, method: string = \"GET\"): BluebirdPromise<T> {\n  return request<T>(\"api.bintray.com\", path, auth, data, method)\n}\n\nfunction request<T>(hostname: string, path: string, token: string | null, data: { [name: string]: any; } | null = null, method: string = \"GET\"): BluebirdPromise<T> {\n  const options: any = {\n    hostname: hostname,\n    path: path,\n    method: method,\n    headers: {\n      \"User-Agent\": \"electron-builder\"\n    }\n  }\n\n  if (hostname.includes(\"github\")) {\n    options.headers.Accept = \"application/vnd.github.v3+json\"\n  }\n\n  const encodedData = data == null ? null : new Buffer(JSON.stringify(data))\n  if (encodedData != null) {\n    options.method = \"post\"\n    options.headers[\"Content-Type\"] = \"application/json\"\n    options.headers[\"Content-Length\"] = encodedData.length\n  }\n  return doApiRequest<T>(options, token, it => it.end(encodedData))\n}\n\nexport function doApiRequest<T>(options: RequestOptions, token: string | null, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): BluebirdPromise<T> {\n  if (token != null) {\n    (<any>options.headers).authorization = token.startsWith(\"Basic\") ? token : `token ${token}`\n  }\n\n  return new BluebirdPromise<T>((resolve, reject, onCancel) => {\n    const request = https.request(options, (response: IncomingMessage) => {\n      try {\n        if (response.statusCode === 404) {\n          // error is clear, we don't need to read detailed error description\n          reject(new HttpError(response, `method: ${options.method} url: https://${options.hostname}${options.path}\n\nPlease double check that your GitHub Token is correct. Due to security reasons GitHub doesn't report actual status, but 404.\n`))\n        }\n        else if (response.statusCode === 204) {\n          // on DELETE request\n          resolve()\n          return\n        }\n\n        let data = \"\"\n        response.setEncoding(\"utf8\")\n        response.on(\"data\", (chunk: string) => {\n          data += chunk\n        })\n\n        response.on(\"end\", () => {\n          try {\n            if (response.statusCode >= 400) {\n              const contentType = response.headers[\"content-type\"]\n              if (contentType != null && contentType.includes(\"json\")) {\n                reject(new HttpError(response, JSON.parse(data)))\n              }\n              else {\n                reject(new HttpError(response))\n              }\n            }\n            else {\n              resolve(data.length === 0 ? null : JSON.parse(data))\n            }\n          }\n          catch (e) {\n            reject(e)\n          }\n        })\n      }\n      catch (e) {\n        reject(e)\n      }\n    })\n    addTimeOutHandler(request, reject)\n    request.on(\"error\", reject)\n    requestProcessor(request, reject)\n    onCancel!(() => request.abort())\n  })\n}\n\nexport class HttpError extends Error {\n  constructor(public response: IncomingMessage, public description: any = null) {\n    super(response.statusCode + \" \" + response.statusMessage + (description == null ? \"\" : (\"\\n\" + JSON.stringify(description, <any>null, \"  \"))) + \"\\nHeaders: \" + JSON.stringify(response.headers, <any>null, \"  \"))\n  }\n}"]}
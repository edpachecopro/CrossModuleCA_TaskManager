{"version":3,"file":"nsis-updater.js","sourceRoot":"","sources":["../../../src/nsis-updater.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from \"events\"\nimport { spawn } from \"child_process\"\nimport * as path from \"path\"\nimport { tmpdir } from \"os\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { BintrayClient } from \"../../src/publish/bintray\"\nimport { HttpError } from \"../../src/publish/restApiRequest\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../../src/util/awaiter\")\n\ninterface VersionInfo {\n  version: string\n}\n\ninterface Provider {\n  checkForUpdates(): Promise<VersionInfo>\n}\n\n//noinspection ReservedWordAsName\ninterface BintraySourceMetadata {\n  // e.g. develar\n  readonly user: string\n  // e.g. onshape-desktop-shell\n  readonly package: string\n\n  // e.g. generic or bin, defaults to generic\n  readonly repository?: string | null\n}\n\nclass BintrayProvider {\n  private client: BintrayClient\n\n  constructor(configuration: BintraySourceMetadata) {\n    this.client = new BintrayClient(configuration.user, configuration.package, configuration.repository || \"generic\")\n  }\n\n  async checkForUpdates(): Promise<VersionInfo> {\n    try {\n      const data = await this.client.getVersion(\"_latest\")\n      return {\n        version: data.name,\n      }\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        throw new Error(`No latest version, please ensure that user, repository and package correctly configured. Or at least one version is published.${e.stack || e.message}`)\n      }\n      throw e\n    }\n  }\n}\n\nclass NsisUpdater extends EventEmitter {\n  private setupPath = path.join(tmpdir(), 'innobox-upgrade.exe')\n\n  private updateAvailable = false\n  private quitAndInstallCalled = false\n\n  private client: Provider\n\n  constructor(public updateUrl?: string) {\n    super()\n  }\n\n  getFeedURL(): string | null | undefined {\n    return this.updateUrl\n  }\n\n  setFeedURL(value: string | BintraySourceMetadata) {\n    this.updateUrl = value.toString()\n\n    this.client = new BintrayProvider(<BintraySourceMetadata>value)\n  }\n\n  checkForUpdates(): Promise<any> {\n    if (this.updateUrl == null) {\n      const message = \"Update URL is not set\"\n      this.emitError(message)\n      return BluebirdPromise.reject(new Error(message))\n    }\n\n    this.emit(\"checking-for-update\")\n    return this.client.checkForUpdates()\n  }\n\n  quitAndInstall(): void {\n    if (!this.updateAvailable) {\n      this.emitError(\"No update available, can't quit and install\")\n      return\n    }\n\n    if (this.quitAndInstallCalled) {\n      return\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    spawn(this.setupPath, [\"/S\"], {\n      detached: true,\n      stdio: \"ignore\",\n    }).unref()\n\n    require(\"electron\").app.quit()\n  }\n\n  // emit both error object and message, this is to keep compatibility with old APIs\n  private emitError (message: string) {\n    return this.emit(\"error\", new Error(message), message)\n  }\n}\n\nconst updater = new NsisUpdater()\nexport= updater"]}
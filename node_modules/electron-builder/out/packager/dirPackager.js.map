{
  "version": 3,
  "file": "dirPackager.js",
  "sourceRoot": "",
  "sources": [
    "../../src/packager/dirPackager.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,2BAA2C,AAAU,AACrD,AAAC;AAAD,6BAAyB,AAAY,AACrC,AAAC;AAAD,sBAAqB,AAAa,AAClC,AAAC;AAGD,MAAM,AAAgB,mBAAmC,WAAe,QAAC,AAAS,UAAC,AAAO,QAAC,AAAmB,AAAC,AAAC;AAChH,MAAM,AAAO,UAAQ,WAAe,QAAC,AAAS,UAAC,AAAO,QAAC,AAAa,AAAC,AAAC;AAEtE,AAAmC;AACnC,MAAM,AAAS,YAAG,AAAO,QAAC,AAAiB,AAAC;AAa5C,4BAA4B,AAAS,MAAE,AAAgB,UAAE,AAAY,MAAE,AAAuB;AAC5F,UAAM,AAAY,sBAAU,AAAM;AAChC,AAAK,eAAE,AAAI,KAAC,AAAK;AACjB,AAAS,mBAAE,AAAI,KAAC,AAAY,AAAC,AAC9B;AAHkC,KAAd,AAAM,EAGxB,AAAI,KAAC,AAAQ,AAAC;AAEjB,AAAgB,qBAAC,AAAY,cAAE,AAAU,YAAE,AAAU,YAAE,AAAQ,AAAC;AAChE,AAAgB,qBAAC,AAAY,cAAE,AAAU,YAAE,AAAM,QAAE,AAAI,AAAC;AACxD,AAAgB,qBAAC,AAAY,cAAE,AAAU,YAAE,AAAS,WAAE,AAAe,AAAC;AACtE,AAAM,WAAC,AAAY,AACrB;AAAC;AAED,0BAA2B,AAAe,YAAE,AAAe,YAAE,AAAc,WAAE,AAAU;AACrF,AAAE,AAAC,QAAC,AAAU,WAAC,AAAc,eAAC,AAAS,AAAC,AAAC,YAAC,AAAC;AACzC,cAAI,AAAC,SAAG,AAAU,gBAAI,AAAS,SAAyC,AAAC,AAC3E;AAAC;AACD,AAAU,eAAC,AAAS,AAAC,aAAG,AAAK,AAC/B;AAAC;AAED,cAA2B,AAA6B,MAAE,AAAW,KAAE,AAAgB,UAAE,AAAY,MAAE,AAAuB,iBAAE,AAAiC;;AAC/J,cAAM,AAAO,UAAG,CAAC,MAAM,WAAe,QAAC,AAAG,IAAM,CAC9C,AAAgB,iBAAC,AAAkB,mBAAC,AAAI,MAAE,AAAQ,UAAE,AAAI,MAAE,AAAe,AAAC,AAAC,mBAC3E,aAAQ,SAAC,AAAG,AAAC,AACd,AAAC,AAAC,QAAC,AAAC,AAAC;AACN,cAAM,AAAO,QAAC,AAAO,SAAE,EAAC,AAAG,KAAE,AAAG,AAAC,AAAC;AAElC,AAAE,AAAC,YAAC,AAAQ,aAAK,AAAQ,YAAI,AAAQ,aAAK,AAAK,AAAC,OAAC,AAAC;AAChD,kBAAW,AAAO,QAAC,AAAO,AAAE,SAAC,AAAS,UAAC,AAAI,MAAE,AAAG,KAAE,AAAa,AAAC,AAClE;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,kBAAM,AAAa,AAAE,AACvB;AAAC,AACH;AAAC;;AAbqB,QAAI,OAazB",
  "sourcesContent": [
    "import { Promise as BluebirdPromise } from \"bluebird\"\nimport { emptyDir } from \"fs-extra-p\"\nimport { warn } from \"../util/log\"\nimport { AppInfo } from \"../appInfo\"\nimport { PlatformPackager } from \"../platformPackager\"\n\nconst downloadElectron: (options: any) => Promise<any> = BluebirdPromise.promisify(require(\"electron-download\"))\nconst extract: any = BluebirdPromise.promisify(require(\"extract-zip\"))\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nexport interface ElectronPackagerOptions {\n  \"extend-info\"?: string\n\n  appInfo: AppInfo\n  platformPackager: PlatformPackager<any>\n\n  \"helper-bundle-id\"?: string | null\n\n  ignore?: any\n}\n\nfunction createDownloadOpts(opts: any, platform: string, arch: string, electronVersion: string) {\n  const downloadOpts = Object.assign({\n    cache: opts.cache,\n    strictSSL: opts[\"strict-ssl\"]\n  }, opts.download)\n\n  subOptionWarning(downloadOpts, \"download\", \"platform\", platform)\n  subOptionWarning(downloadOpts, \"download\", \"arch\", arch)\n  subOptionWarning(downloadOpts, \"download\", \"version\", electronVersion)\n  return downloadOpts\n}\n\nfunction subOptionWarning (properties: any, optionName: any, parameter: any, value: any) {\n  if (properties.hasOwnProperty(parameter)) {\n    warn(`${optionName}.${parameter} will be inferred from the main options`)\n  }\n  properties[parameter] = value\n}\n\nexport async function pack(opts: ElectronPackagerOptions, out: string, platform: string, arch: string, electronVersion: string, initializeApp: () => Promise<any>) {\n  const zipPath = (await BluebirdPromise.all<any>([\n    downloadElectron(createDownloadOpts(opts, platform, arch, electronVersion)),\n    emptyDir(out)\n  ]))[0]\n  await extract(zipPath, {dir: out})\n\n  if (platform === \"darwin\" || platform === \"mas\") {\n    await(<any>require(\"./mac\")).createApp(opts, out, initializeApp)\n  }\n  else {\n    await initializeApp()\n  }\n}"
  ]
}

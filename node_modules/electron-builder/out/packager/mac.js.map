{
  "version": 3,
  "file": "mac.js",
  "sourceRoot": "",
  "sources": [
    "../../src/packager/mac.ts"
  ],
  "names": [],
  "mappings": ";;AACA,6BAAkD,AAAY,AAC9D,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,wBAAyD,AAAO,AAChE,AAAC;AAAD,2BAA2C,AAAU,AACrD,AAAC;AAAD,uBAA6B,AAAc,AAG3C,AAAC;AADD,AAAmC;AACnC,MAAM,AAAS,YAAG,AAAO,QAAC,AAAiB,AAAC;AAE5C,kBAAmB,AAAgB,UAAE,AAAe,SAAE,AAAe;AACnE,AAAM,WAAC,aAAM,OAAC,AAAI,KAAC,AAAI,KAAC,AAAQ,UAAE,AAAO,AAAC,UAAE,AAAI,KAAC,AAAI,KAAC,AAAQ,UAAE,AAAO,AAAC,AAAC,AAC3E;AAAC;AAED,qBAAsB,AAAsB,gBAAE,AAAe;AAC3D,AAAM,sBAAgB,QAAC,AAAG,IAAC,CAAC,AAAS,WAAE,AAAY,cAAE,AAAY,AAAC,eAAE,AAAM;AACxE,cAAM,AAAkB,qBAAG,AAAI,KAAC,AAAI,KAAC,AAAc,AAAE,4BAAW,AAAM,MAAM,SAAE,AAAU,YAAE,AAAO,AAAC;AAClG,AAAM,eAAC,AAAQ,SAAC,AAAkB,AAAE,gCAAW,AAAM,MAAE,KAAE,AAAO,UAAG,AAAM,AAAC,QACvE,AAAI,KAAC,MAAM,AAAQ,SAAC,AAAc,AAAE,4BAAW,AAAM,MAAM,AAAE,aAAG,AAAO,YAAG,AAAM,MAAM,AAAC,AAAC,AAC7F;AAAC,AAAC,AACJ,KALS;AAKR;AAED,kCAAkC,AAAkB;AAClD,AAAkG;AAClG,AAA0L;AAC1L,AAAM,WAAC,AAAU,WAAC,AAAO,QAAC,AAAI,MAAE,AAAG,AAAC,KAAC,AAAO,QAAC,AAAiB,mBAAE,AAAE,AAAC,AACrE;AAAC;AAED,mBAAgC,AAA6B,MAAE,AAAiB,WAAE,AAAiC;;AACjH,cAAM,AAAO,UAAG,AAAI,KAAC,AAAO;AAC5B,cAAM,AAAW,cAAG,AAAO,QAAC,AAAe;AAE3C,cAAM,AAAY,eAAG,AAAI,KAAC,AAAI,KAAC,AAAS,WAAE,AAAc,gBAAE,AAAU,AAAC;AACrE,cAAM,AAAc,iBAAG,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAY,AAAC;AAE5D,cAAM,AAAgB,mBAAG,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAY,AAAC;AAC9D,cAAM,AAAmB,sBAAG,AAAI,KAAC,AAAI,KAAC,AAAc,gBAAE,AAAqB,uBAAE,AAAU,YAAE,AAAY,AAAC;AACtG,cAAM,AAAqB,wBAAG,AAAI,KAAC,AAAI,KAAC,AAAc,gBAAE,AAAwB,0BAAE,AAAU,YAAE,AAAY,AAAC;AAC3G,cAAM,AAAqB,wBAAG,AAAI,KAAC,AAAI,KAAC,AAAc,gBAAE,AAAwB,0BAAE,AAAU,YAAE,AAAY,AAAC;AAE3G,cAAM,AAAM,SAAG,MAAM,WAAe,QAAC,AAAG,IAAU,CAChD,AAAa,AAAE,iBACf,WAAe,QAAC,AAAG,IAAa,CAAC,AAAgB,kBAAE,AAAmB,qBAAE,AAAqB,uBAAE,AAAqB,uBAAE,AAAI,KAAC,AAAa,AAAC,AAAC,iBAAE,AAAE,MAAI,AAAE,MAAI,AAAI,OAAG,AAAE,KAAG,aAAQ,SAAC,AAAE,IAAE,AAAM,AAAC,AAAC,AAC1L,AAAC;AACF,cAAM,AAAY,eAAkB,AAAM,OAAC,AAAC,AAAE;AAC9C,cAAM,AAAQ,WAAG,QAAU,MAAC,AAAY,aAAC,AAAC,AAAC,AAAC;AAC5C,cAAM,AAAW,cAAG,QAAU,MAAC,AAAY,aAAC,AAAC,AAAC,AAAC;AAC/C,cAAM,AAAa,gBAAG,QAAU,MAAC,AAAY,aAAC,AAAC,AAAC,AAAC;AACjD,cAAM,AAAa,gBAAG,QAAU,MAAC,AAAY,aAAC,AAAC,AAAC,AAAC;AAEjD,AAAkE;AAClE,AAAE,AAAC,YAAC,AAAY,aAAC,AAAC,AAAC,MAAI,AAAI,AAAC,MAAC,AAAC;AAC5B,AAAM,mBAAC,AAAM,OAAC,AAAQ,UAAE,QAAU,MAAC,AAAY,aAAC,AAAC,AAAC,AAAC,AAAC,AACtD;AAAC;AAED,cAAM,AAAmB,sBAAG,AAAwB,yBAAC,AAAO,QAAC,AAAE,AAAC;AAChE,cAAM,AAAsB,yBAAG,AAAwB,yBAAC,AAAI,KAAC,AAAkB,AAAC,AAAI,2BAAG,AAAmB,mBAAS,AAAC;AAEpH,AAAQ,iBAAC,AAAmB,sBAAG,AAAO,QAAC,AAAW;AAClD,AAAQ,iBAAC,AAAkB,qBAAG,AAAmB;AACjD,AAAQ,iBAAC,AAAY,eAAG,AAAO,QAAC,AAAW;AAC3C,AAAW,oBAAC,AAAmB,AAAG,0BAAG,AAAO,QAAC,AAAW,WAAS;AACjE,AAAW,oBAAC,AAAkB,qBAAG,AAAsB;AACvD,AAAQ,iBAAC,AAAkB,qBAAG,AAAW;AACzC,AAAW,oBAAC,AAAY,eAAG,AAAO,QAAC,AAAW;AAC9C,AAAW,oBAAC,AAAkB,AAAG,yBAAG,AAAW,WAAS;AACxD,AAAa,sBAAC,AAAmB,AAAG,0BAAG,AAAW,WAAY;AAC9D,AAAa,sBAAC,AAAkB,AAAG,yBAAG,AAAsB,sBAAK;AACjE,AAAa,sBAAC,AAAY,AAAG,mBAAG,AAAO,QAAC,AAAW,WAAY;AAC/D,AAAa,sBAAC,AAAkB,AAAG,yBAAG,AAAW,WAAY;AAC7D,AAAa,sBAAC,AAAmB,AAAG,0BAAG,AAAO,QAAC,AAAW,WAAY;AACtE,AAAa,sBAAC,AAAkB,AAAG,yBAAG,AAAsB,sBAAK;AACjE,AAAa,sBAAC,AAAY,AAAG,mBAAG,AAAO,QAAC,AAAW,WAAY;AAC/D,AAAa,sBAAC,AAAkB,AAAG,yBAAG,AAAW,WAAY;AAE7D,eAAG,IAAC,AAAO,QAAC,AAAO,SAAE,AAAE;AACrB,AAAQ,qBAAC,AAA0B,6BAAG,AAAE;AACxC,AAAQ,qBAAC,AAAe,kBAAG,AAAE,AAC/B;AAAC,AAAC;AACF,eAAG,IAAC,AAAO,QAAC,AAAY,cAAE,AAAE,MAAI,AAAQ,SAAC,AAAe,kBAAG,AAAE,AAAC;AAE9D,cAAM,AAAS,YAAG,OAAO,QAAC,AAAI,KAAC,AAAgB,iBAAC,AAAW,YAAC,AAAK,MAAC,AAAS,AAAC,WAAC,AAAM,OAAC,OAAO,QAAC,AAAI,KAAC,AAAgB,iBAAC,AAA4B,6BAAC,AAAS,AAAC,AAAC;AAC1J,AAAE,AAAC,YAAC,AAAS,UAAC,AAAM,SAAG,AAAC,AAAC,GAAC,AAAC;AACzB,AAAQ,qBAAC,AAAgB,6BAAa,AAAG,IAAC,AAAQ;AAChD,AAAM;AACJ,AAAe,qCAAE,AAAQ,SAAC,AAAI;AAC9B,AAAkB,wCAAE,AAAQ,SAAC,AAAO,QAAC,AAAK,AAAE,AAC7C,AACH;AAJS;AAIR,AAAC,AACJ,aAN8B,AAAS;AAMtC;AAED,eAAG,IAAC,AAAO,QAAC,AAAQ,UAAE,AAAE,MAAI,AAAQ,SAAC,AAAyB,4BAAG,AAAE,AAAC;AACpE,eAAG,IAAC,AAAO,QAAC,AAAS,WAAE,AAAE,MAAI,AAAQ,SAAC,AAAwB,2BAAG,AAAE,AAAC;AAEpE,cAAM,AAAQ,WAAoC,CAChD,aAAS,UAAC,AAAgB,kBAAE,QAAU,MAAC,AAAQ,AAAC,AAAC,YACjD,aAAS,UAAC,AAAmB,qBAAE,QAAU,MAAC,AAAW,AAAC,AAAC,eACvD,aAAS,UAAC,AAAqB,uBAAE,QAAU,MAAC,AAAa,AAAC,AAAC,iBAC3D,aAAS,UAAC,AAAqB,uBAAE,QAAU,MAAC,AAAa,AAAC,AAAC,iBAC3D,AAAQ,SAAC,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAO,AAAC,UAAE,AAAU,YAAE,AAAQ,SAAC,AAAkB,AAAC,AACpF;AAED,cAAM,AAAI,OAAG,MAAM,AAAI,KAAC,AAAgB,iBAAC,AAAW,AAAE;AACtD,AAAE,AAAC,YAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAQ,qBAAC,AAAI,KAAC,aAAI,KAAC,AAAI,MAAE,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAW,aAAE,AAAQ,SAAC,AAAgB,AAAC,AAAC,AAAC,AAC5F;AAAC;AAED,cAAM,WAAe,QAAC,AAAG,IAAC,AAAQ,AAAC;AAEnC,cAAM,AAAW,YAAC,AAAc,gBAAE,AAAW,AAAC;AAC9C,cAAM,aAAM,OAAC,AAAI,KAAC,AAAO,QAAC,AAAY,AAAC,eAAE,AAAI,KAAC,AAAI,KAAC,AAAS,AAAE,eAAG,AAAW,WAAM,AAAC,AAAC,AACtF;AAAC;;AAnFqB,QAAS,YAmF9B",
  "sourcesContent": [
    "import { ElectronPackagerOptions } from \"./dirPackager\"\nimport { rename, readFile, writeFile, copy } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { parse as parsePlist, build as buildPlist } from \"plist\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { use, asArray } from \"../util/util\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nfunction doRename (basePath: string, oldName: string, newName: string) {\n  return rename(path.join(basePath, oldName), path.join(basePath, newName))\n}\n\nfunction moveHelpers (frameworksPath: string, appName: string) {\n  return BluebirdPromise.map([\" Helper\", \" Helper EH\", \" Helper NP\"], suffix => {\n    const executableBasePath = path.join(frameworksPath, `Electron${suffix}.app`, \"Contents\", \"MacOS\")\n    return doRename(executableBasePath, `Electron${suffix}`, appName + suffix)\n      .then(() => doRename(frameworksPath, `Electron${suffix}.app`, `${appName}${suffix}.app`))\n  })\n}\n\nfunction filterCFBundleIdentifier(identifier: string) {\n  // Remove special characters and allow only alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.)\n  // Apple documentation: https://developer.apple.com/library/mac/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070\n  return identifier.replace(/ /g, \"-\").replace(/[^a-zA-Z0-9.-]/g, \"\")\n}\n\nexport async function createApp(opts: ElectronPackagerOptions, appOutDir: string, initializeApp: () => Promise<any>) {\n  const appInfo = opts.appInfo\n  const appFilename = appInfo.productFilename\n\n  const contentsPath = path.join(appOutDir, \"Electron.app\", \"Contents\")\n  const frameworksPath = path.join(contentsPath, \"Frameworks\")\n\n  const appPlistFilename = path.join(contentsPath, \"Info.plist\")\n  const helperPlistFilename = path.join(frameworksPath, \"Electron Helper.app\", \"Contents\", \"Info.plist\")\n  const helperEHPlistFilename = path.join(frameworksPath, \"Electron Helper EH.app\", \"Contents\", \"Info.plist\")\n  const helperNPPlistFilename = path.join(frameworksPath, \"Electron Helper NP.app\", \"Contents\", \"Info.plist\")\n\n  const result = await BluebirdPromise.all<any | n>([\n    initializeApp(),\n    BluebirdPromise.map<any | null>([appPlistFilename, helperPlistFilename, helperEHPlistFilename, helperNPPlistFilename, opts[\"extend-info\"]], it => it == null ? it : readFile(it, \"utf8\"))\n  ])\n  const fileContents: Array<string> = result[1]!\n  const appPlist = parsePlist(fileContents[0])\n  const helperPlist = parsePlist(fileContents[1])\n  const helperEHPlist = parsePlist(fileContents[2])\n  const helperNPPlist = parsePlist(fileContents[3])\n\n  // If an extend-info file was supplied, copy its contents in first\n  if (fileContents[4] != null) {\n    Object.assign(appPlist, parsePlist(fileContents[4]))\n  }\n\n  const appBundleIdentifier = filterCFBundleIdentifier(appInfo.id)\n  const helperBundleIdentifier = filterCFBundleIdentifier(opts[\"helper-bundle-id\"] || `${appBundleIdentifier}.helper`)\n\n  appPlist.CFBundleDisplayName = appInfo.productName\n  appPlist.CFBundleIdentifier = appBundleIdentifier\n  appPlist.CFBundleName = appInfo.productName\n  helperPlist.CFBundleDisplayName = `${appInfo.productName} Helper`\n  helperPlist.CFBundleIdentifier = helperBundleIdentifier\n  appPlist.CFBundleExecutable = appFilename\n  helperPlist.CFBundleName = appInfo.productName\n  helperPlist.CFBundleExecutable = `${appFilename} Helper`\n  helperEHPlist.CFBundleDisplayName = `${appFilename} Helper EH`\n  helperEHPlist.CFBundleIdentifier = `${helperBundleIdentifier}.EH`\n  helperEHPlist.CFBundleName = `${appInfo.productName} Helper EH`\n  helperEHPlist.CFBundleExecutable = `${appFilename} Helper EH`\n  helperNPPlist.CFBundleDisplayName = `${appInfo.productName} Helper NP`\n  helperNPPlist.CFBundleIdentifier = `${helperBundleIdentifier}.NP`\n  helperNPPlist.CFBundleName = `${appInfo.productName} Helper NP`\n  helperNPPlist.CFBundleExecutable = `${appFilename} Helper NP`\n\n  use(appInfo.version, it => {\n    appPlist.CFBundleShortVersionString = it\n    appPlist.CFBundleVersion = it\n  })\n  use(appInfo.buildVersion, it => appPlist.CFBundleVersion = it)\n\n  const protocols = asArray(opts.platformPackager.devMetadata.build.protocols).concat(asArray(opts.platformPackager.platformSpecificBuildOptions.protocols))\n  if (protocols.length > 0) {\n    appPlist.CFBundleURLTypes = protocols.map(protocol => {\n      return {\n        CFBundleURLName: protocol.name,\n        CFBundleURLSchemes: protocol.schemes.slice()\n      }\n    })\n  }\n\n  use(appInfo.category, it => appPlist.LSApplicationCategoryType = it)\n  use(appInfo.copyright, it => appPlist.NSHumanReadableCopyright = it)\n\n  const promises: Array<BluebirdPromise<any | n>> = [\n    writeFile(appPlistFilename, buildPlist(appPlist)),\n    writeFile(helperPlistFilename, buildPlist(helperPlist)),\n    writeFile(helperEHPlistFilename, buildPlist(helperEHPlist)),\n    writeFile(helperNPPlistFilename, buildPlist(helperNPPlist)),\n    doRename(path.join(contentsPath, \"MacOS\"), \"Electron\", appPlist.CFBundleExecutable)\n  ]\n\n  const icon = await opts.platformPackager.getIconPath()\n  if (icon != null) {\n    promises.push(copy(icon, path.join(contentsPath, \"Resources\", appPlist.CFBundleIconFile)))\n  }\n\n  await BluebirdPromise.all(promises)\n\n  await moveHelpers(frameworksPath, appFilename)\n  await rename(path.dirname(contentsPath), path.join(appOutDir, `${appFilename}.app`))\n}"
  ]
}

{
  "version": 3,
  "file": "asarUtil.js",
  "sourceRoot": "",
  "sources": [
    "../src/asarUtil.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,wCAAiE,AAAuB,AACxF,AAAC;AAAD,uBAAkC,AAAa,AAC/C,AAAC;AAAD,6BAGO,AAAY,AACnB,AAAC;AAAD,2BAA2C,AAAU,AACrD,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,sBAAoB,AAAY,AAChC,AAAC;AAAD,4BAA0B,AAAW,AACrC,AAAC;AAAD,6BAA2B,AAAmB,AAE9C,AAAC;AAAD,MAAM,AAAY,eAAQ,WAAe,QAAC,AAAS,UAAC,AAAO,QAAC,AAAc,AAAC,AAAC;AAC5E,MAAM,AAAM,SAAG,AAAO,QAAE,AAAoB,AAAC;AAC7C,MAAM,AAAU,aAAG,AAAO,QAAC,AAAsC,AAAC;AAClE,MAAM,AAAM,SAAG,AAAO,QAAC,AAAO,AAAC,SAAC,AAAM;AAEtC,AAAmC;AACnC,MAAM,AAAS,YAAG,AAAO,QAAC,AAAgB,AAAC;AAE3C,MAAM,AAAiB,oBAAG,AAAE;AAC5B,MAAM,AAAW,cAAG,EAAC,AAAW,aAAE,AAAiB,AAAC;AACpD,MAAM,AAAoB,uBAAG,AAAI,KAAC,AAAG,MAAG,AAAc,iBAAG,AAAI,KAAC,AAAG;AAEjE,cAAqB,AAAe,SAAE,AAA8C,UAAE,AAAkC,QAAE,AAAyB;AACjJ,AAAM,wBAAQ,QAAC,AAAO,AAAC,SACpB,AAAI,KAAC,AAAK;AACT,AAAM,0BAAgB,QAAC,AAAG,IAAC,AAAK,OAAE,AAAI;AACpC,kBAAM,AAAQ,WAAG,AAAO,UAAG,AAAI,KAAC,AAAG,MAAG,AAAI;AAC1C,AAAE,AAAC,gBAAC,AAAM,UAAI,AAAI,QAAI,CAAC,AAAM,OAAC,AAAQ,AAAC,AAAC,WAAC,AAAC;AACxC,AAAM,uBAAM,AAAI,AAClB;AAAC;AAED,AAAM,gCAAM,MAAC,AAAQ,AAAC,UACnB,AAAI,KAAE,AAAI,IAAL;AACJ,AAAE,AAAC,oBAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAQ,6BAAC,AAAQ,UAAE,AAAI,AAAC,AAC1B;AAAC;AACD,AAAE,AAAC,oBAAC,AAAI,KAAC,AAAW,AAAE,AAAC,eAAC,AAAC;AACvB,AAAM,2BAAC,AAAI,KAAC,AAAQ,UAAE,AAAQ,UAAE,AAAM,QAAE,AAAI,AAAC,AAC/C;AAAC;AACD,AAAM,uBAAC,AAAQ,AACjB;AAAC,AAAC,AACN,aAVS;AAUR,SAhBM,EAgBJ,AAAW,AAAC,AACjB;AAAC,AAAC,KAnBG,EAoBJ,AAAI,KAAC,AAAI;AACR,AAAI,aAAC,AAAI,KAAC,CAAC,AAAC,GAAE,AAAC;AACb,AAA2B;AAC3B,AAAE,AAAC,gBAAC,AAAK,MAAC,AAAO,QAAC,AAAC,AAAC,MAAI,AAAK,MAAC,AAAO,QAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AACzC,AAAM,uBAAC,AAAC,AACV;AAAC,AACD,AAAI,uBAAK,AAAC,KAAI,AAAI,QAAI,AAAK,MAAC,AAAO,QAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AACvC,AAAM,uBAAC,AAAC,AACV;AAAC,AACD,AAAI,aAHC,AAAE,AAAC,UAGC,AAAC,KAAI,AAAI,QAAI,AAAK,MAAC,AAAO,QAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AACvC,AAAM,uBAAC,CAAC,AAAC,AACX;AAAC,AACD,AAAI,aAHC,AAAE,AAAC,MAGH,AAAC;AACJ,AAAM,uBAAC,AAAC,EAAC,AAAa,cAAC,AAAC,AAAC,AAC3B;AAAC,AACH;AAAC,AAAC;AAEF,cAAM,AAAM,SAAkB,AAAe,kBAAG,CAAC,AAAO,AAAC,WAAG,AAAE;AAC9D,AAAG,AAAC,aAAC,IAAI,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACtB,AAAE,AAAC,gBAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAE,AAAC,oBAAC,AAAK,MAAC,AAAO,QAAC,AAAI,AAAC,AAAC,OAAC,AAAC;AACxB,AAAM,2BAAC,AAAI,KAAC,AAAK,MAAC,AAAM,QAAE,AAAI,AAAC,AACjC;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAM,2BAAC,AAAI,KAAC,AAAI,AAAC,AACnB;AAAC,AACH;AAAC,AACH;AAAC;AACD,AAAM,eAAC,AAAM,AACf;AAAC,AAAC,AACN;AAAC;AAnDe,QAAI,OAmDnB;AAED,2BAAwC,AAAW,KAAE,AAAqB,eAAE,AAAoB,SAAE,AAAiC;;AACjI,cAAM,AAAQ,WAAG,IAAI,AAAG,AAAiB;AACzC,cAAM,AAAK,QAAG,WAAW,AAAG,KAAE,CAAC,AAAE,IAAE,AAAI;AACrC,AAAQ,qBAAC,AAAG,IAAC,AAAE,IAAE,AAAI,AAAC,AACxB;AAAC,SAFmB,AAAI,EAErB,AAAM,AAAC;AAEV,AAAkG;AAClG,cAAM,AAAsB,uBAAC,AAAG,KAAE,AAAI,KAAC,AAAI,KAAC,AAAa,eAAE,AAAU,AAAC,aAAE,AAAO,QAAC,AAAQ,YAAI,AAAI,OAAG,AAAK,QAAG,MAAM,AAAK,MAAC,AAAG,KAAE,AAAK,OAAE,AAAO,AAAC,UAAE,AAAQ,UAAE,AAAO,AAAC,AACjK;AAAC;;AARqB,QAAiB,oBAQtC;AAED,qBAAqB,AAAY,MAAE,AAAkB,SAAE,AAAkB;AACvE,AAAM,WAAC,AAAI,KAAC,AAAU,WAAC,AAAU,AAAC,eAAI,AAAO,QAAC,AAAK,MAAC,AAAI,AAAC,AAC3D;AAAC;AAED,eAAqB,AAAW,KAAE,AAAwB,WAAE,AAAY;;AACtE,cAAM,AAAa,iBAAI,MAAM,aAAQ,SAAC,AAAO,QAAC,AAAQ,UAAE,AAAM,AAAC,AAAC,SAAC,AAAK,MAAC,AAAI,AAAC,MAAC,AAAG,IAAC,AAAI;AACnF,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAO,QAAC,AAAG,AAAC,SAAK,CAAC,AAAC,AAAC,GAAC,AAAC;AAC7B,AAAI,uBAAG,AAAI,KAAC,AAAK,MAAC,AAAG,AAAC,KAAC,AAAG,AAAG,AAC/B;AAAC;AACD,AAAI,mBAAG,AAAI,KAAC,AAAI,AAAE;AAClB,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAC,AAAC,OAAK,AAAG,AAAC,KAAC,AAAC;AACpB,AAAI,uBAAG,AAAI,KAAC,AAAK,MAAC,AAAC,AAAC,AACtB;AAAC;AACD,AAAM,mBAAC,AAAI,AACb;AAAC,AAAC,SAToB;AAWtB,cAAM,AAAQ,WAAkB,AAAE;AAClC,AAAG,AAAC,aAAC,IAAI,AAAI,QAAI,AAAa,AAAC,eAAC,AAAC;AAC/B,gBAAI,AAAc,iBAAG,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAG,AAAC;AACzC,gBAAI,AAAG,MAAG,AAAG;AACb,AAAG,AAAC,iBAAC,IAAI,AAAa,iBAAI,AAAc,AAAC,gBAAC,AAAC;AACzC,AAAG,sBAAG,AAAI,KAAC,AAAI,KAAC,AAAG,KAAE,AAAa,AAAC;AACnC,AAAQ,yBAAC,AAAI,KAAC,AAAG,AAAC,AACpB;AAAC,AACH;AAAC;AAED,cAAM,AAAe,kBAAkB,AAAE;AACzC,YAAI,AAAO,UAAG,AAAC;AACf,cAAM,AAAK,QAAG,AAAS,UAAC,AAAM;AAC9B,AAAG,AAAC,aAAC,IAAI,AAAI,QAAI,AAAQ,AAAC,UAAC,AAAC;AAC1B,AAAE,AAAC,gBAAC,EAAC,AAAe,gBAAC,AAAQ,QAAC,AAAI,AAAC,iBAAI,AAAS,UAAC,AAAQ,QAAC,AAAI,AAAC,AAAC,cAAC,AAAC;AAChE,AAAe,gCAAC,AAAI,KAAC,AAAI,AAAC,AAC5B;AAAC,AACH;AAAC;AACD,AAAG,AAAC,aAAC,IAAI,AAAI,QAAI,AAAS,AAAC,WAAC,AAAC;AAC3B,AAAE,AAAC,gBAAC,EAAC,AAAe,gBAAC,AAAQ,QAAC,AAAI,AAAC,AAAC,eAAC,AAAC;AACpC,AAAe,gCAAC,AAAI,KAAC,AAAI,AAAC;AAC1B,AAAO,2BAAI,AAAC,AACd;AAAC,AACH;AAAC;AACD,cAAG,AAAC,IAAqB,sBAAC,CAAC,AAAK,QAAG,AAAO,AAAC,WAAG,AAAK,QAAG,AAAG,AAAC,GAAa,AAAC;AACxE,AAAM,eAAC,AAAe,AACxB;AAAC;AAAA;AAED,4BAAkC,AAAW,KAAE,AAAoB,OAAE,AAA4B,UAAE,AAA2B,gBAAE,AAAsC,mBAAE,AAAoB,cAAE,AAA4D;;AACxP,cAAM,AAAuB,0BAAG,AAAc,eAAC,AAAM;AACrD,cAAM,AAAuB,0BAAwB,AAAE;AACvD,AAAG,AAAC,aAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAK,MAAC,AAAM,QAAE,AAAC,IAAG,AAAC,GAAE,AAAC,AAAE,KAAE,AAAC;AAC7C,kBAAM,AAAI,OAAG,AAAK,MAAC,AAAC,AAAC;AACrB,kBAAM,AAAK,QAAG,AAAI,KAAC,AAAW,YAAC,AAAoB,AAAC;AACpD,AAAE,AAAC,gBAAC,AAAK,QAAG,AAAC,AAAC,GAAC,AAAC;AACd,AAAQ,AACV;AAAC;AAED,kBAAM,AAAc,iBAAG,AAAI,KAAC,AAAO,QAAC,AAAI,KAAC,AAAG,KAAE,AAAK,QAAG,AAAoB,qBAAC,AAAM,SAAG,AAAC,AAAC;AACtF,AAAE,AAAC,gBAAC,AAAc,iBAAG,AAAC,AAAC,GAAC,AAAC;AACvB,AAAQ,AACV;AAAC;AAED,AAAE,AAAC,gBAAC,CAAC,AAAQ,SAAC,AAAG,IAAC,AAAI,AAAE,MAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AAClC,AAAQ,AACV;AAAC;AAED,kBAAM,AAAa,gBAAG,AAAI,KAAC,AAAS,UAAC,AAAC,GAAE,AAAc,AAAC;AAEvD,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAM,AAAK,WAAC,AAAa,cAAC,AAAM,SAAG,AAAC,IAAG,AAAuB,AAAC,2BAAI,AAAI,KAAC,AAAQ,SAAC,AAAc,AAAC,AAAC,iBAAC,AAAC;AAC1G,sBAAM,AAAO,UAAG,aAAQ,SAAC,AAAI,AAAC;AAE9B,AAAE,AAAC,oBAAC,AAAuB,wBAAC,AAAM,SAAG,AAAiB,AAAC,mBAAC,AAAC;AACvD,0BAAM,WAAe,QAAC,AAAG,IAAC,AAAuB,AAAC;AAClD,AAAuB,4CAAC,AAAM,SAAG,AAAC,AACpC;AAAC;AACD,AAAuB,wCAAC,AAAI,KAAC,AAAO,AAAC;AACrC,AAA4B,6CAAC,AAAC,AAAC,KAAG,AAAO,AAC3C;AAAC;AAED,AAAE,AAAC,gBAAC,AAAc,eAAC,AAAG,IAAC,AAAa,AAAC,AAAC,gBAAC,AAAC;AACtC,sBAAM,AAAU,aAAG,AAAI,KAAC,AAAO,QAAC,AAAI,AAAC;AACrC,AAAE,AAAC,oBAAC,AAAU,eAAK,AAAa,iBAAI,CAAC,AAAc,eAAC,AAAG,IAAC,AAAU,AAAC,AAAC,aAAC,AAAC;AACpE,AAAc,mCAAC,AAAG,IAAC,AAAU,AAAC;AAC9B,AAAiB,sCAAC,AAAI,KAAC,aAAS,UAAC,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAI,KAAC,AAAQ,SAAC,AAAG,KAAE,AAAU,AAAC,AAAC,AAAC,AAAC;AAC1F,AAAE,AAAC,wBAAC,AAAiB,kBAAC,AAAM,SAAG,AAAiB,AAAC,mBAAC,AAAC;AACjD,8BAAM,WAAe,QAAC,AAAG,IAAC,AAAiB,AAAC;AAC5C,AAAiB,0CAAC,AAAM,SAAG,AAAC,AAC9B;AAAC,AACH;AAAC;AACD,AAAQ,AACV;AAAC;AAED,kBAAM,AAAG,MAAG,AAAI,KAAC,AAAO,QAAC,AAAI,AAAC;AAC9B,gBAAI,AAAY,eAAG,AAAK;AACxB,AAAE,AAAC,gBAAC,AAAG,QAAK,AAAM,UAAI,AAAG,QAAK,AAAM,AAAC,QAAC,AAAC;AACrC,AAAY,+BAAG,AAAI,AACrB;AAAC,AACD,AAAI,mBAAC,AAAE,AAAC,IAAC,AAAG,QAAK,AAAE,AAAC,IAAC,AAAC;AACpB,AAAY,+BAAG,MAAM,AAAY,aAAC,AAAI,AAAC,AACzC;AAAC;AAED,AAAE,AAAC,gBAAC,CAAC,AAAY,AAAC,cAAC,AAAC;AAClB,AAAQ,AACV;AAAC;AAED,kBAAG,AAAC,QAAG,AAAI,KAAC,AAAQ,SAAC,AAAG,KAAE,AAAa,AAAC,cAA6D,AAAC;AAEtG,gBAAI,AAAU,aAAG,AAAI,KAAC,AAAO,QAAC,AAAI,AAAC;AAEnC,AAAoF;AACpF,AAAiB,8BAAC,AAAI,KAAC,aAAS,UAAC,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAI,KAAC,AAAQ,SAAC,AAAG,KAAE,AAAU,AAAC,AAAC,AAAC,AAAC;AAC1F,AAAE,AAAC,gBAAC,AAAiB,kBAAC,AAAM,SAAG,AAAiB,AAAC,mBAAC,AAAC;AACjD,sBAAM,WAAe,QAAC,AAAG,IAAC,AAAiB,AAAC;AAC5C,AAAiB,kCAAC,AAAM,SAAG,AAAC,AAC9B;AAAC;AAED,mBAAO,AAAU,eAAK,AAAa,eAAE,AAAC;AACpC,AAAc,+BAAC,AAAG,IAAC,AAAU,AAAC;AAC9B,AAAU,6BAAG,AAAI,KAAC,AAAO,QAAC,AAAU,AAAC,AACvC;AAAC;AACD,AAAc,2BAAC,AAAG,IAAC,AAAa,AAAC,AACnC;AAAC;AAED,AAAE,AAAC,YAAC,AAAuB,wBAAC,AAAM,SAAG,AAAC,AAAC,GAAC,AAAC;AACvC,kBAAM,WAAe,QAAC,AAAG,IAAC,AAAuB,AAAC,AACpD;AAAC;AACD,AAAE,AAAC,YAAC,AAAiB,kBAAC,AAAM,SAAG,AAAC,AAAC,GAAC,AAAC;AACjC,kBAAM,WAAe,QAAC,AAAG,IAAC,AAAiB,AAAC;AAC5C,AAAiB,8BAAC,AAAM,SAAG,AAAC,AAC9B;AAAC,AACH;AAAC;AAAA;AAED,gCAAsC,AAAW,KAAE,AAAY,MAAE,AAAoB,OAAE,AAA4B,UAAE,AAAoB;;AACvI,AAA2B;AAC3B,cAAM,AAAc,iBAAG,IAAI,AAAG,AAAU;AAExC,cAAM,AAAiB,oBAAwB,CAAC,aAAS,UAAC,AAAI,KAAC,AAAO,QAAC,AAAI,AAAC,AAAC,AAAC;AAC9E,cAAM,AAAY,AAAG,mBAAG,AAAI,IAAW;AACvC,cAAM,AAAY,eAAG,IAAI,AAAG,AAAkB;AAE9C,cAAM,AAA4B,+BAAmC,IAAI,AAAK,MAAC,AAAK,MAAC,AAAM,AAAC;AAC5F,AAAE,AAAC,YAAC,AAAO,QAAC,AAAW,gBAAK,AAAK,AAAC,OAAC,AAAC;AAClC,kBAAM,AAAkB,mBAAC,AAAG,KAAE,AAAK,OAAE,AAAQ,UAAE,AAAc,gBAAE,AAAiB,mBAAE,AAAY,cAAE,AAA4B,AAAC,AAC/H;AAAC;AAED,cAAM,AAAS,YAAG,AAAO,QAAC,AAAS,aAAI,AAAI,OAAG,AAAI,OAAG,IAAI,YAAS,UAAC,AAAO,QAAC,AAAS,AAAC;AACrF,cAAM,AAAM,SAAG,AAAO,QAAC,AAAM,UAAI,AAAI,OAAG,AAAI,WAAO,YAAS,UAAC,AAAO,QAAC,AAAM;AACzE,AAAS,uBAAE,AAAI,AAChB,AAAC;AAF2E,SAA9B;AAI/C,cAAM,AAAM,SAAkB,AAAE;AAChC,cAAM,AAAU,aAAG,IAAI,AAAU,WAAC,AAAG,AAAC;AACtC,cAAM,AAAY,eAAwB,AAAE;AAC5C,cAAM,AAAe,kBAAG,AAAI,KAAC,AAAI,KAAC,AAAG,KAAE,AAAc,AAAC;AACtD,AAAG,AAAC,aAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAK,MAAC,AAAM,QAAE,AAAC,IAAG,AAAC,GAAE,AAAC,AAAE,KAAE,AAAC;AAC7C,kBAAM,AAAI,OAAG,AAAK,MAAC,AAAC,AAAC;AACrB,kBAAM,AAAI,OAAG,AAAQ,SAAC,AAAG,IAAC,AAAI,AAAE;AAChC,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AAClB,sBAAM,AAAU,aAAG,AAAI,KAAC,AAAO,QAAC,AAAI,AAAC;AACrC,sBAAM,AAAO,UAAG,AAAU,WAAC,AAAkB,mBAAC,AAAU,AAAC;AAEzD,AAAE,AAAC,oBAAC,AAAO,QAAC,AAAQ,YAAI,AAAiB,kBAAC,AAAM,SAAG,AAAC,AAAC,GAAC,AAAC;AACrD,0BAAM,WAAe,QAAC,AAAG,IAAC,AAAiB,AAAC;AAC5C,AAAiB,sCAAC,AAAM,SAAG,AAAC,AAC9B;AAAC;AAED,sBAAM,AAAkB,qBAAG,AAA4B,6BAAC,AAAC,AAAC;AAC1D,oBAAI,AAAO,UAAe,AAAI;AAC9B,AAAE,AAAC,oBAAC,AAAkB,sBAAI,AAAI,AAAC,MAAC,AAAC;AAC/B,AAAE,AAAC,wBAAC,AAAO,QAAC,AAAa,iBAAI,AAAI,QAAI,AAAI,SAAK,AAAe,AAAC,iBAAC,AAAC;AAC9D,AAAO,kCAAG,AAAI,KAAC,AAAS,UAAC,aAAU,YAAC,MAAM,aAAQ,SAAC,AAAI,AAAC,QAAE,AAAO,QAAC,AAAa,AAAC,gBAAE,AAAI,MAAE,AAAC,AAAC,AAC5F;AAAC,AACH;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAO,8BAAG,AAAkB,mBAAC,AAAkB,mBAAC,AAAK,AAAE,AAAC,AAC1D;AAAC;AAED,sBAAM,AAAQ,WAAG,AAAO,WAAI,AAAI,OAAG,AAAI,KAAC,AAAI,OAAG,AAAM,OAAC,AAAU,WAAC,AAAO,AAAC;AACzE,sBAAM,AAAI,OAAG,AAAU,WAAC,AAAkB,mBAAC,AAAI,AAAC;AAChD,AAAI,qBAAC,AAAI,OAAG,AAAQ;AACpB,AAAE,AAAC,oBAAC,AAAO,QAAC,AAAQ,AAAI,YAAC,AAAM,UAAI,AAAI,QAAI,AAAM,OAAC,AAAK,MAAC,AAAI,AAAC,AAAC,AAAC,OAAC,AAAC;AAC/D,AAAI,yBAAC,AAAQ,WAAG,AAAI;AAEpB,AAAE,AAAC,wBAAC,CAAC,AAAO,QAAC,AAAQ,AAAC,UAAC,AAAC;AACtB,AAAiB,0CAAC,AAAI,KAAC,aAAS,UAAC,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAI,KAAC,AAAQ,SAAC,AAAG,KAAE,AAAU,AAAC,AAAC,AAAC,AAAC;AAC1F,8BAAM,WAAe,QAAC,AAAG,IAAC,AAAiB,AAAC;AAC5C,AAAiB,0CAAC,AAAM,SAAG,AAAC,AAC9B;AAAC;AAED,0BAAM,AAAY,eAAG,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAI,KAAC,AAAQ,SAAC,AAAG,KAAE,AAAI,AAAC,AAAC;AACtE,AAAY,iCAAC,AAAI,KAAC,AAAO,WAAI,AAAI,OAAG,AAAQ,SAAC,AAAI,MAAE,AAAY,cAAE,AAAI,AAAC,QAAG,aAAS,UAAC,AAAY,cAAE,AAAO,AAAC,AAAC;AAC1G,AAAE,AAAC,wBAAC,AAAY,aAAC,AAAM,SAAG,AAAiB,AAAC,mBAAC,AAAC;AAC5C,8BAAM,WAAe,QAAC,AAAG,IAAC,AAAY,AAAC;AACvC,AAAY,qCAAC,AAAM,SAAG,AAAC,AACzB;AAAC,AACH;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAE,AAAC,wBAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,AAAY,qCAAC,AAAG,IAAC,AAAI,MAAE,AAAO,AAAC,AACjC;AAAC;AAED,AAAE,AAAC,wBAAC,AAAQ,WAAG,AAAU,AAAC,YAAC,AAAC;AAC1B,8BAAM,IAAI,AAAK,AAAC,UAAG,AAAI,IAA0C,AAAC,AACpE;AAAC;AAED,AAAI,yBAAC,AAAM,SAAG,AAAU,WAAC,AAAM,OAAC,AAAQ,AAAE;AAC1C,AAAqC;AACrC,AAAE,AAAC,wBAAC,AAAO,QAAC,AAAQ,aAAK,AAAO,WAAI,AAAI,KAAC,AAAI,OAAG,AAAI,AAAC,MAAC,AAAC;AACrD,AAAI,6BAAC,AAAU,aAAG,AAAI,AACxB;AAAC;AACD,AAAM,2BAAC,AAAI,KAAC,AAAI,AAAC;AACjB,AAAU,+BAAC,AAAM,OAAC,AAAG,IAAC,AAAM,OAAC,AAAQ,AAAC,AAAC,AACzC;AAAC,AACH;AAAC,AACD,AAAI,uBAAK,AAAI,KAAC,AAAW,AAAE,AAAC,eAAC,AAAC;AAC5B,oBAAI,AAAQ,WAAG,AAAK;AACpB,AAAE,AAAC,oBAAC,AAAc,eAAC,AAAG,IAAC,AAAI,AAAC,AAAC,OAAC,AAAC;AAC7B,AAAQ,+BAAG,AAAI,AACjB;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAAQ,+BAAG,AAAS,aAAI,AAAI,QAAI,AAAW,YAAC,AAAI,KAAC,AAAQ,SAAC,AAAG,KAAE,AAAI,AAAC,OAAE,AAAS,WAAE,AAAO,QAAC,AAAU,AAAC;AACpG,AAAE,AAAC,wBAAC,AAAQ,AAAC,UAAC,AAAC;AACb,AAAiB,0CAAC,AAAI,KAAC,aAAS,UAAC,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAI,KAAC,AAAQ,SAAC,AAAG,KAAE,AAAI,AAAC,AAAC,AAAC,AAAC,AACtF;AAAC,AACD,AAAI,2BAAC,AAAC;AACJ,AAAG,AAAC,6BAAC,IAAI,AAAC,KAAI,AAAc,AAAC,gBAAC,AAAC;AAC7B,AAAE,AAAC,gCAAC,AAAI,KAAC,AAAM,AAAG,SAAC,AAAC,EAAC,AAAM,SAAG,AAAC,AAAC,KAAI,AAAI,KAAC,AAAC,EAAC,AAAM,AAAC,YAAK,AAAI,KAAC,AAAG,OAAI,AAAI,KAAC,AAAU,WAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AACtF,AAAQ,2CAAG,AAAI;AACf,AAAc,+CAAC,AAAG,IAAC,AAAI,AAAC;AACxB,AAAqJ;AACrJ,AAAuI;AACvI,AAAiB,kDAAC,AAAI,KAAC,aAAS,UAAC,AAAI,KAAC,AAAI,KAAC,AAAY,cAAE,AAAI,KAAC,AAAQ,SAAC,AAAG,KAAE,AAAI,AAAC,AAAC,AAAC,AAAC;AACpF,AAAK,AACP;AAAC,AACH;AAAC,AACH;AAAC,AACH;AAAC;AACD,AAAU,2BAAC,AAAe,gBAAC,AAAI,MAAE,AAAQ,AAAC,AAC5C;AAAC,AACD,AAAI,aAzBC,AAAE,AAAC,MAyBH,AAAE,AAAC,IAAC,AAAI,KAAC,AAAc,AAAE,AAAC,kBAAC,AAAC;AAC/B,AAAU,2BAAC,AAAU,WAAC,AAAI,MAAE,AAAI,AAAC,AACnC;AAAC,AACH;AAAC;AAED,cAAM,WAAe,QAAC,AAAG,IAAC,AAAY,AAAC;AACvC,cAAM,AAAa,cAAC,AAAU,YAAE,AAAI,MAAE,AAAM,QAAE,AAAY,AAAC,AAC7D;AAAC;AAAA;AAED,4BAA4B,AAAS;AACnC,QAAI,AAAC;AACH,YAAI,AAAO,UAAG,AAAK;AACnB,AAAG,AAAC,aAAC,IAAI,AAAI,QAAI,AAAM,OAAC,AAAmB,oBAAC,AAAI,AAAC,AAAC,OAAC,AAAC;AAClD,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAC,AAAC,OAAK,AAAG,OAAI,AAAI,SAAK,AAAM,UAAI,AAAI,SAAK,AAAS,aAAI,AAAI,SAAK,AAAU,AAAC,YAAC,AAAC;AACpF,uBAAO,AAAI,KAAC,AAAI,AAAC;AACjB,AAAO,0BAAG,AAAI,AAChB;AAAC,AACH;AAAC;AAED,AAAE,AAAC,YAAC,AAAO,AAAC,SAAC,AAAC;AACZ,AAAM,mBAAC,AAAI,KAAC,AAAS,UAAC,AAAI,MAAE,AAAI,MAAE,AAAC,AAAC,AACtC;AAAC,AACH;AACA,MAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,eAAK,MAAC,AAAC,AAAC,AACV;AAAC;AAED,AAAM,WAAC,AAAI,AACb;AAAC;AAED,uBAAuB,AAAe,YAAE,AAAY,MAAE,AAAqB,QAAE,AAAiC;AAC5G,UAAM,AAAY,eAAG,AAAM,OAAC,AAAW,AAAE;AACzC,AAAY,iBAAC,AAAW,YAAC,AAAI,KAAC,AAAS,UAAC,AAAU,WAAC,AAAM,AAAC,AAAC;AAC3D,UAAM,AAAS,YAAG,AAAY,aAAC,AAAQ,AAAE;AAEzC,UAAM,AAAU,aAAG,AAAM,OAAC,AAAW,AAAE;AACvC,AAAU,eAAC,AAAW,YAAC,AAAS,UAAC,AAAM,AAAC;AACxC,UAAM,AAAO,UAAG,AAAU,WAAC,AAAQ,AAAE;AAErC,UAAM,AAAW,cAAG,aAAiB,kBAAC,AAAI,AAAC;AAC3C,AAAM,eAAK,WAAe,QAAC,CAAC,AAAO,SAAE,AAAM;AACzC,AAAW,oBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAC/B,AAAW,oBAAC,AAAI,KAAC,AAAQ,UAAE,AAAO,AAAC;AACnC,AAAW,oBAAC,AAAK,MAAC,AAAO,AAAC;AAE1B,mBAAW,AAAgB,MAAE,AAAa;AACxC,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAM,WAAK,AAAK,AAAC,OAAC,AAAC;AAC1B,AAAW,4BAAC,AAAG,AAAE;AACjB,AAAM,AACR;AAAC;AAED,kBAAM,AAAI,OAAG,AAAI,KAAC,AAAK,AAAC;AAExB,kBAAM,AAAI,OAAG,AAAY,aAAC,AAAG,IAAC,AAAI,AAAC;AACnC,AAAE,AAAC,gBAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAW,4BAAC,AAAK,MAAC,AAAI,MAAE,MAAM,AAAC,EAAC,AAAI,MAAE,AAAK,QAAG,AAAC,AAAC,AAAC;AACjD,AAAM,AACR;AAAC;AAED,kBAAM,AAAU,aAAG,aAAgB,iBAAC,AAAI,AAAC;AACzC,AAAU,uBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAC9B,AAAU,uBAAC,AAAI,KAAC,AAAK,OAAE,MAAM,AAAC,EAAC,AAAI,MAAE,AAAK,QAAG,AAAC,AAAC,AAAC;AAChD,AAAU,uBAAC,AAAI,KAAC,AAAW;AACzB,AAAG,qBAAE,AAAK,AACX,AAAC,AACJ;AAH+B;AAG9B;AAED,AAAW,oBAAC,AAAK,MAAC,AAAS,WAAE,MAAM,AAAC,EAAC,AAAM,QAAE,AAAC,AAAC,AAAC,AAClD;AAAC,AAAC,AACJ,KA7BS;AA6BR;AAED,4BAAyC,AAAgB,UAAE,AAAoB,cAAE,AAAqB;;AACpG,uBAAe,AAAY;AACzB,AAAM,mBAAC,IAAI,AAAK,AAAC,UAAG,AAAa,oBAAK,AAAY,2BAAa,AAAQ,eAAK,AAAI,IAAE,AAAC,AACrF;AAAC;AAED,YAAI,AAAyB;AAC7B,YAAI,AAAC;AACH,AAAI,mBAAG,wBAAQ,SAAC,AAAQ,UAAE,AAAY,AAAC,AACzC;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,kBAAM,AAAQ,WAAG,MAAM,OAAU,WAAC,AAAQ,AAAC;AAC3C,AAAE,AAAC,gBAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,sBAAM,AAAK,AAAC,MAAmD,AAAC,AAClE;AAAC;AAED,gBAAI,AAAC;AACH,wCAAW,YAAC,AAAQ,AAAC,AACvB;AACA,cAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,sBAAM,AAAK,AAAC,wBAAiB,AAAC,CAAE,AAAC,AACnC;AAAC;AAED,AAA8D;AAC9D,AAAI,mBAAG,AAAI,AACb;AAAC;AAED,AAAE,AAAC,YAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,kBAAM,AAAK,AAAC,MAAmD,AAAC,AAClE;AAAC;AACD,AAAE,AAAC,YAAC,AAAI,KAAC,AAAI,SAAK,AAAC,AAAC,GAAC,AAAC;AACpB,kBAAM,AAAK,AAAC,MAAsB,AAAC,AACrC;AAAC,AACH;AAAC;;AAhCqB,QAAkB,qBAgCvC;AAED,kBAAkB,AAAW,KAAE,AAAY,MAAE,AAAY;AACvD,AAAM,eAAK,WAAe,QAAC,UAAU,AAAO,SAAE,AAAM;AAClD,cAAM,AAAU,aAAG,aAAgB,iBAAC,AAAG,AAAC;AACxC,cAAM,AAAW,cAAG,aAAiB,kBAAC,AAAI,MAAE,EAAC,AAAI,MAAE,AAAK,MAAC,AAAI,AAAC,AAAC;AAE/D,AAAU,mBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAC9B,AAAW,oBAAC,AAAE,GAAC,AAAO,SAAE,AAAM,AAAC;AAE/B,AAAW,oBAAC,AAAE,GAAC,AAAM,QAAE;AACrB,AAAU,uBAAC,AAAI,KAAC,AAAW,AAAC,AAC9B;AAAC,AAAC;AAEF,AAAW,oBAAC,AAAI,KAAC,AAAQ,UAAE,AAAO,AAAC,AACrC;AAAC,AAAC,AACJ,KAbS;AAaR",
  "sourcesContent": [
    "import { AsarFileInfo, listPackage, statFile, AsarOptions } from \"asar-electron-builder\"\nimport { statOrNull, debug } from \"./util/util\"\nimport {\n  lstat, readdir, readFile, Stats, createWriteStream, ensureDir, createReadStream, readJson,\n  writeFile\n} from \"fs-extra-p\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport * as path from \"path\"\nimport { log } from \"./util/log\"\nimport { Minimatch } from \"minimatch\"\nimport { deepAssign } from \"./util/deepAssign\"\n\nconst isBinaryFile: any = BluebirdPromise.promisify(require(\"isbinaryfile\"))\nconst pickle = require (\"chromium-pickle-js\")\nconst Filesystem = require(\"asar-electron-builder/lib/filesystem\")\nconst UINT64 = require(\"cuint\").UINT64\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./util/awaiter\")\n\nconst MAX_FILE_REQUESTS = 32\nconst concurrency = {concurrency: MAX_FILE_REQUESTS}\nconst NODE_MODULES_PATTERN = path.sep + \"node_modules\" + path.sep\n\nexport function walk(dirPath: string, consumer?: (file: string, stat: Stats) => void, filter?: (file: string) => boolean, addRootToResult?: boolean): BluebirdPromise<Array<string>> {\n  return readdir(dirPath)\n    .then(names => {\n      return BluebirdPromise.map(names, name => {\n        const filePath = dirPath + path.sep + name\n        if (filter != null && !filter(filePath)) {\n          return <any>null\n        }\n\n        return lstat(filePath)\n          .then((stat): any => {\n            if (consumer != null) {\n              consumer(filePath, stat)\n            }\n            if (stat.isDirectory()) {\n              return walk(filePath, consumer, filter, true)\n            }\n            return filePath\n          })\n      }, concurrency)\n    })\n    .then(list => {\n      list.sort((a, b) => {\n        // files before directories\n        if (Array.isArray(a) && Array.isArray(b)) {\n          return 0\n        }\n        else if (a == null || Array.isArray(a)) {\n          return 1\n        }\n        else if (b == null || Array.isArray(b)) {\n          return -1\n        }\n        else {\n          return a.localeCompare(b)\n        }\n      })\n\n      const result: Array<string> = addRootToResult ? [dirPath] : []\n      for (let item of list) {\n        if (item != null) {\n          if (Array.isArray(item)) {\n            result.push.apply(result, item)\n          }\n          else {\n            result.push(item)\n          }\n        }\n      }\n      return result\n    })\n}\n\nexport async function createAsarArchive(src: string, resourcesPath: string, options: AsarOptions, filter: (file: string) => boolean): Promise<any> {\n  const metadata = new Map<string, Stats>()\n  const files = await walk(src, (it, stat) => {\n    metadata.set(it, stat)\n  }, filter)\n\n  // sort files to minimize file change (i.e. asar file is not changed dramatically on small change)\n  await createPackageFromFiles(src, path.join(resourcesPath, \"app.asar\"), options.ordering == null ? files : await order(src, files, options), metadata, options)\n}\n\nfunction isUnpackDir(path: string, pattern: Minimatch, rawPattern: string): boolean {\n  return path.startsWith(rawPattern) || pattern.match(path)\n}\n\nasync function order(src: string, filenames: Array<string>, options: any) {\n  const orderingFiles = (await readFile(options.ordering, \"utf8\")).split(\"\\n\").map(line => {\n    if (line.indexOf(\":\") !== -1) {\n      line = line.split(\":\").pop()!\n    }\n    line = line.trim()\n    if (line[0] === \"/\") {\n      line = line.slice(1)\n    }\n    return line\n  })\n\n  const ordering: Array<string> = []\n  for (let file of orderingFiles) {\n    let pathComponents = file.split(path.sep)\n    let str = src\n    for (let pathComponent of pathComponents) {\n      str = path.join(str, pathComponent)\n      ordering.push(str)\n    }\n  }\n\n  const filenamesSorted: Array<string> = []\n  let missing = 0\n  const total = filenames.length\n  for (let file of ordering) {\n    if (!filenamesSorted.includes(file) && filenames.includes(file)) {\n      filenamesSorted.push(file)\n    }\n  }\n  for (let file of filenames) {\n    if (!filenamesSorted.includes(file)) {\n      filenamesSorted.push(file)\n      missing += 1\n    }\n  }\n  log(`Ordering file has ${((total - missing) / total * 100)}% coverage.`)\n  return filenamesSorted\n}\n\nasync function detectUnpackedDirs(src: string, files: Array<string>, metadata: Map<string, Stats>, autoUnpackDirs: Set<string>, createDirPromises: Array<Promise<any>>, unpackedDest: string, fileIndexToModulePackageData: Array<BluebirdPromise<string>>) {\n  const packageJsonStringLength = \"package.json\".length\n  const readPackageJsonPromises: Array<Promise<any>> = []\n  for (let i = 0, n = files.length; i < n; i++) {\n    const file = files[i]\n    const index = file.lastIndexOf(NODE_MODULES_PATTERN)\n    if (index < 0) {\n      continue\n    }\n\n    const nextSlashIndex = file.indexOf(path.sep, index + NODE_MODULES_PATTERN.length + 1)\n    if (nextSlashIndex < 0) {\n      continue\n    }\n\n    if (!metadata.get(file)!.isFile()) {\n      continue\n    }\n\n    const nodeModuleDir = file.substring(0, nextSlashIndex)\n\n    if (file.length === (nodeModuleDir.length + 1 + packageJsonStringLength) && file.endsWith(\"package.json\")) {\n      const promise = readJson(file)\n\n      if (readPackageJsonPromises.length > MAX_FILE_REQUESTS) {\n        await BluebirdPromise.all(readPackageJsonPromises)\n        readPackageJsonPromises.length = 0\n      }\n      readPackageJsonPromises.push(promise)\n      fileIndexToModulePackageData[i] = promise\n    }\n\n    if (autoUnpackDirs.has(nodeModuleDir)) {\n      const fileParent = path.dirname(file)\n      if (fileParent !== nodeModuleDir && !autoUnpackDirs.has(fileParent)) {\n        autoUnpackDirs.add(fileParent)\n        createDirPromises.push(ensureDir(path.join(unpackedDest, path.relative(src, fileParent))))\n        if (createDirPromises.length > MAX_FILE_REQUESTS) {\n          await BluebirdPromise.all(createDirPromises)\n          createDirPromises.length = 0\n        }\n      }\n      continue\n    }\n\n    const ext = path.extname(file)\n    let shouldUnpack = false\n    if (ext === \".dll\" || ext === \".exe\") {\n      shouldUnpack = true\n    }\n    else if (ext === \"\") {\n      shouldUnpack = await isBinaryFile(file)\n    }\n\n    if (!shouldUnpack) {\n      continue\n    }\n\n    log(`${path.relative(src, nodeModuleDir)} is not packed into asar archive - contains executable code`)\n\n    let fileParent = path.dirname(file)\n\n    // create parent dir to be able to copy file later without directory existence check\n    createDirPromises.push(ensureDir(path.join(unpackedDest, path.relative(src, fileParent))))\n    if (createDirPromises.length > MAX_FILE_REQUESTS) {\n      await BluebirdPromise.all(createDirPromises)\n      createDirPromises.length = 0\n    }\n\n    while (fileParent !== nodeModuleDir) {\n      autoUnpackDirs.add(fileParent)\n      fileParent = path.dirname(fileParent)\n    }\n    autoUnpackDirs.add(nodeModuleDir)\n  }\n\n  if (readPackageJsonPromises.length > 0) {\n    await BluebirdPromise.all(readPackageJsonPromises)\n  }\n  if (createDirPromises.length > 0) {\n    await BluebirdPromise.all(createDirPromises)\n    createDirPromises.length = 0\n  }\n}\n\nasync function createPackageFromFiles(src: string, dest: string, files: Array<string>, metadata: Map<string, Stats>, options: AsarOptions) {\n  // search auto unpacked dir\n  const autoUnpackDirs = new Set<string>()\n\n  const createDirPromises: Array<Promise<any>> = [ensureDir(path.dirname(dest))]\n  const unpackedDest = `${dest}.unpacked`\n  const changedFiles = new Map<string, string>()\n\n  const fileIndexToModulePackageData: Array<BluebirdPromise<string>> = new Array(files.length)\n  if (options.smartUnpack !== false) {\n    await detectUnpackedDirs(src, files, metadata, autoUnpackDirs, createDirPromises, unpackedDest, fileIndexToModulePackageData)\n  }\n\n  const unpackDir = options.unpackDir == null ? null : new Minimatch(options.unpackDir)\n  const unpack = options.unpack == null ? null : new Minimatch(options.unpack, {\n    matchBase: true\n  })\n\n  const toPack: Array<string> = []\n  const filesystem = new Filesystem(src)\n  const copyPromises: Array<Promise<any>> = []\n  const mainPackageJson = path.join(src, \"package.json\")\n  for (let i = 0, n = files.length; i < n; i++) {\n    const file = files[i]\n    const stat = metadata.get(file)!\n    if (stat.isFile()) {\n      const fileParent = path.dirname(file)\n      const dirNode = filesystem.searchNodeFromPath(fileParent)\n\n      if (dirNode.unpacked && createDirPromises.length > 0) {\n        await BluebirdPromise.all(createDirPromises)\n        createDirPromises.length = 0\n      }\n\n      const packageDataPromise = fileIndexToModulePackageData[i]\n      let newData: any | null = null\n      if (packageDataPromise == null) {\n        if (options.extraMetadata != null && file === mainPackageJson) {\n          newData = JSON.stringify(deepAssign(await readJson(file), options.extraMetadata), null, 2)\n        }\n      }\n      else {\n        newData = cleanupPackageJson(packageDataPromise.value())\n      }\n\n      const fileSize = newData == null ? stat.size : Buffer.byteLength(newData)\n      const node = filesystem.searchNodeFromPath(file)\n      node.size = fileSize\n      if (dirNode.unpacked || (unpack != null && unpack.match(file))) {\n        node.unpacked = true\n\n        if (!dirNode.unpacked) {\n          createDirPromises.push(ensureDir(path.join(unpackedDest, path.relative(src, fileParent))))\n          await BluebirdPromise.all(createDirPromises)\n          createDirPromises.length = 0\n        }\n\n        const unpackedFile = path.join(unpackedDest, path.relative(src, file))\n        copyPromises.push(newData == null ? copyFile(file, unpackedFile, stat) : writeFile(unpackedFile, newData))\n        if (copyPromises.length > MAX_FILE_REQUESTS) {\n          await BluebirdPromise.all(copyPromises)\n          copyPromises.length = 0\n        }\n      }\n      else {\n        if (newData != null) {\n          changedFiles.set(file, newData)\n        }\n\n        if (fileSize > 4294967295) {\n          throw new Error(`${file}: file size can not be larger than 4.2GB`)\n        }\n\n        node.offset = filesystem.offset.toString()\n        //noinspection JSBitwiseOperatorUsage\n        if (process.platform !== \"win32\" && stat.mode & 0x40) {\n          node.executable = true\n        }\n        toPack.push(file)\n        filesystem.offset.add(UINT64(fileSize))\n      }\n    }\n    else if (stat.isDirectory()) {\n      let unpacked = false\n      if (autoUnpackDirs.has(file)) {\n        unpacked = true\n      }\n      else {\n        unpacked = unpackDir != null && isUnpackDir(path.relative(src, file), unpackDir, options.unpackDir!)\n        if (unpacked) {\n          createDirPromises.push(ensureDir(path.join(unpackedDest, path.relative(src, file))))\n        }\n        else {\n          for (let d of autoUnpackDirs) {\n            if (file.length > (d.length + 2) && file[d.length] === path.sep && file.startsWith(d)) {\n              unpacked = true\n              autoUnpackDirs.add(file)\n              // not all dirs marked as unpacked after first iteration - because node module dir can be marked as unpacked after processing node module dir content\n              // e.g. node-notifier/example/advanced.js processed, but only on process vendor/terminal-notifier.app module will be marked as unpacked\n              createDirPromises.push(ensureDir(path.join(unpackedDest, path.relative(src, file))))\n              break\n            }\n          }\n        }\n      }\n      filesystem.insertDirectory(file, unpacked)\n    }\n    else if (stat.isSymbolicLink()) {\n      filesystem.insertLink(file, stat)\n    }\n  }\n\n  await BluebirdPromise.all(copyPromises)\n  await writeAsarFile(filesystem, dest, toPack, changedFiles)\n}\n\nfunction cleanupPackageJson(data: any): any {\n  try {\n    let changed = false\n    for (let prop of Object.getOwnPropertyNames(data)) {\n      if (prop[0] === \"_\" || prop === \"dist\" || prop === \"gitHead\" || prop === \"keywords\") {\n        delete data[prop]\n        changed = true\n      }\n    }\n\n    if (changed) {\n      return JSON.stringify(data, null, 2)\n    }\n  }\n  catch (e) {\n    debug(e)\n  }\n\n  return null\n}\n\nfunction writeAsarFile(filesystem: any, dest: string, toPack: Array<string>, changedFiles: Map<string, string>): Promise<any> {\n  const headerPickle = pickle.createEmpty()\n  headerPickle.writeString(JSON.stringify(filesystem.header))\n  const headerBuf = headerPickle.toBuffer()\n\n  const sizePickle = pickle.createEmpty()\n  sizePickle.writeUInt32(headerBuf.length)\n  const sizeBuf = sizePickle.toBuffer()\n\n  const writeStream = createWriteStream(dest)\n  return new BluebirdPromise((resolve, reject) => {\n    writeStream.on(\"error\", reject)\n    writeStream.once(\"finish\", resolve)\n    writeStream.write(sizeBuf)\n\n    function w(list: Array<any>, index: number) {\n      if (list.length === index) {\n        writeStream.end()\n        return\n      }\n\n      const file = list[index]\n\n      const data = changedFiles.get(file)\n      if (data != null) {\n        writeStream.write(data, () => w(list, index + 1))\n        return\n      }\n\n      const readStream = createReadStream(file)\n      readStream.on(\"error\", reject)\n      readStream.once(\"end\", () => w(list, index + 1))\n      readStream.pipe(writeStream, {\n        end: false\n      })\n    }\n\n    writeStream.write(headerBuf, () => w(toPack, 0))\n  })\n}\n\nexport async function checkFileInArchive(asarFile: string, relativeFile: string, messagePrefix: string) {\n  function error(text: string) {\n    return new Error(`${messagePrefix} \"${relativeFile}\" in the \"${asarFile}\" ${text}`)\n  }\n\n  let stat: AsarFileInfo | null\n  try {\n    stat = statFile(asarFile, relativeFile)\n  }\n  catch (e) {\n    const fileStat = await statOrNull(asarFile)\n    if (fileStat == null) {\n      throw error(`does not exist. Seems like a wrong configuration.`)\n    }\n\n    try {\n      listPackage(asarFile)\n    }\n    catch (e) {\n      throw error(`is corrupted: ${e}`)\n    }\n\n    // asar throws error on access to undefined object (info.link)\n    stat = null\n  }\n\n  if (stat == null) {\n    throw error(`does not exist. Seems like a wrong configuration.`)\n  }\n  if (stat.size === 0) {\n    throw error(`is corrupted: size 0`)\n  }\n}\n\nfunction copyFile(src: string, dest: string, stats: Stats) {\n  return new BluebirdPromise(function (resolve, reject) {\n    const readStream = createReadStream(src)\n    const writeStream = createWriteStream(dest, {mode: stats.mode})\n\n    readStream.on(\"error\", reject)\n    writeStream.on(\"error\", reject)\n\n    writeStream.on(\"open\", function () {\n      readStream.pipe(writeStream)\n    })\n\n    writeStream.once(\"finish\", resolve)\n  })\n}"
  ]
}

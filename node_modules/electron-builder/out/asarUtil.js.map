{
  "version": 3,
  "file": "asarUtil.js",
  "sourceRoot": "",
  "sources": [
    "../src/asarUtil.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { AsarFileInfo, listPackage, statFile, AsarOptions, AsarFileMetadata, createPackageFromFiles } from \"asar\"\nimport { statOrNull } from \"./util\"\nimport { Glob } from \"glob\"\nimport { lstat, remove } from \"fs-extra-p\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport * as path from \"path\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport async function createAsarArchive(src: string, resourcesPath: string, options: AsarOptions): Promise<any> {\n  // dot: true as in the asar by default by we use glob default - do not copy hidden files\n  let glob: Glob | null = null\n  const files = (await new BluebirdPromise<Array<string>>((resolve, reject) => {\n    glob = new Glob(\"**/*\", {\n      cwd: src,\n    }, (error, matches) => {\n      if (error == null) {\n        resolve(matches)\n      }\n      else {\n        reject(error)\n      }\n    })\n  })).map(it => path.join(src, it))\n\n  const metadata: { [key: string]: AsarFileMetadata; } = {}\n\n  // https://github.com/electron-userland/electron-builder/issues/482#issuecomment-225100630\n  const stats = await BluebirdPromise.map(files, it => {\n    const systemIndependentPath = process.platform === \"win32\" ? it.replace(/\\\\/g, \"/\") : it\n    if (glob!.symlinks[systemIndependentPath]) {\n      // asar doesn't use stat for link\n      metadata[it] = {\n        type: \"link\",\n      }\n      return null\n    }\n\n    const cachedType = glob!.cache[systemIndependentPath]\n    if (cachedType == null || cachedType === \"FILE\") {\n      const stat = glob!.statCache[systemIndependentPath]\n      return stat == null ? lstat(it) : <any>stat\n    }\n    else {\n      // asar doesn't use stat for dir\n      metadata[it] = {\n        type: \"directory\",\n      }\n    }\n    return null\n  })\n\n  for (let i = 0, n = files.length; i < n; i++) {\n    const stat = stats[i]\n    if (stat != null) {\n      metadata[files[i]] = {\n        type: stat.isFile() ? \"file\" : (stat.isDirectory() ? \"directory\" : \"link\"),\n        stat: stat,\n      }\n    }\n  }\n\n  await BluebirdPromise.promisify(createPackageFromFiles)(src, path.join(resourcesPath, \"app.asar\"), files, metadata, options)\n  await remove(src)\n}\n\nexport async function checkFileInPackage(asarFile: string, relativeFile: string) {\n  let stat: AsarFileInfo | null\n  try {\n    stat = statFile(asarFile, relativeFile)\n  }\n  catch (e) {\n    const fileStat = await statOrNull(asarFile)\n    if (fileStat == null) {\n      throw new Error(`File \"${asarFile}\" does not exist. Seems like a wrong configuration.`)\n    }\n\n    try {\n      listPackage(asarFile)\n    }\n    catch (e) {\n      throw new Error(`File \"${asarFile}\" is corrupted: ${e}`)\n    }\n\n    // asar throws error on access to undefined object (info.link)\n    stat = null\n  }\n\n  if (stat == null) {\n    throw new Error(`Application entry file \"${relativeFile}\" in the \"${asarFile}\" does not exist. Seems like a wrong configuration.`)\n  }\n  if (stat.size === 0) {\n    throw new Error(`Application entry file \"${relativeFile}\" in the \"${asarFile}\" is corrupted: size 0`)\n  }\n}"
  ]
}

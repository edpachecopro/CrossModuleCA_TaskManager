{
  "version": 3,
  "file": "linuxPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/linuxPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { PlatformPackager, BuildInfo, Target, TargetEx } from \"./platformPackager\"\nimport { Platform, LinuxBuildOptions, Arch } from \"./metadata\"\nimport FpmTarget from \"./targets/fpm\"\nimport { createCommonTarget, DEFAULT_TARGET } from \"./targets/targetFactory\"\nimport { LinuxTargetHelper } from \"./targets/LinuxTargetHelper\"\nimport AppImageTarget from \"./targets/appImage\"\nimport { rename } from \"fs-extra-p\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./util/awaiter\")\n\nexport class LinuxPackager extends PlatformPackager<LinuxBuildOptions> {\n  constructor(info: BuildInfo) {\n    super(info)\n  }\n\n  normalizePlatformSpecificBuildOptions(options: LinuxBuildOptions | n): LinuxBuildOptions {\n    if (options != null && options.description != null) {\n      return options\n    }\n    else {\n      return Object.assign({\n        description: this.info.appInfo.description,\n      }, options)\n    }\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void, cleanupTasks: Array<() => Promise<any>>): void {\n    for (let name of targets) {\n      if (name === \"dir\") {\n        continue\n      }\n\n      let helper: LinuxTargetHelper | null\n      const getHelper = () => {\n        if (helper == null) {\n          helper = new LinuxTargetHelper(this)\n        }\n        return helper\n      }\n\n      if (name === \"appimage\") {\n        const targetClass: typeof AppImageTarget = require(\"./targets/appImage\").default\n        mapper(name, outDir => new targetClass(this, getHelper(), outDir))\n      }\n      else if (name === DEFAULT_TARGET || name === \"deb\" || name === \"rpm\" || name === \"sh\" || name === \"freebsd\" || name === \"pacman\" || name === \"apk\" || name === \"p5p\") {\n        const targetClass: typeof FpmTarget = require(\"./targets/fpm\").default\n        const target = name === DEFAULT_TARGET ? \"deb\" : name\n        mapper(target, outDir => new targetClass(target, this,  getHelper(), outDir))\n      }\n      else {\n        mapper(name, () => createCommonTarget(name))\n      }\n    }\n  }\n\n  get platform() {\n    return Platform.LINUX\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    const appOutDir = this.computeAppOutDir(outDir, arch)\n    await this.doPack(await this.computePackOptions(), outDir, appOutDir, this.platform.nodeName, arch, this.platformSpecificBuildOptions)\n    postAsyncTasks.push(this.packageInDistributableFormat(outDir, appOutDir, arch, targets))\n  }\n\n  protected postInitApp(appOutDir: string): Promise<any> {\n    return rename(path.join(appOutDir, \"electron\"), path.join(appOutDir, this.appInfo.productFilename))\n  }\n\n  protected async packageInDistributableFormat(outDir: string, appOutDir: string, arch: Arch, targets: Array<Target>): Promise<any> {\n    // todo fix fpm - if run in parallel, get strange tar errors\n    for (let t of targets) {\n      if (t instanceof TargetEx) {\n        await t.build(appOutDir, arch)\n      }\n    }\n\n    const promises: Array<Promise<any>> = []\n    // https://github.com/electron-userland/electron-builder/issues/460\n    // for some reasons in parallel to fmp we cannot use tar\n    for (let t of targets) {\n      const target = t.name\n      if (target === \"zip\" || target === \"7z\" || target.startsWith(\"tar.\")) {\n        const destination = path.join(outDir, this.generateName(target, arch, true))\n        promises.push(this.archiveApp(target, appOutDir, destination)\n          .then(() => this.dispatchArtifactCreated(destination)))\n      }\n    }\n\n    if (promises.length > 0) {\n      await BluebirdPromise.all(promises)\n    }\n  }\n}"
  ]
}

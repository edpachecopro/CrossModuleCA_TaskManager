{
  "version": 3,
  "file": "util.js",
  "sourceRoot": "",
  "sources": [
    "../src/util.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { execFile, spawn as _spawn, ChildProcess, SpawnOptions } from \"child_process\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport readPackageJsonAsync = require(\"read-package-json\")\nimport * as os from \"os\"\nimport * as path from \"path\"\nimport { readJson, stat, Stats } from \"fs-extra-p\"\nimport { yellow } from \"chalk\"\nimport debugFactory = require(\"debug\")\nimport { Debugger } from \"~debug/node\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport const log = console.log\n\nexport const debug: Debugger = debugFactory(\"electron-builder\")\nexport const debug7z: Debugger = debugFactory(\"electron-builder:7z\")\n\nexport function warn(message: string) {\n  console.warn(yellow(`Warning: ${message}`))\n}\n\nconst DEFAULT_APP_DIR_NAMES = [\"app\", \"www\"]\n\nexport const readPackageJson = BluebirdPromise.promisify(readPackageJsonAsync)\n\nexport function installDependencies(appDir: string, electronVersion: string, arch: string = process.arch, command: string = \"install\"): BluebirdPromise<any> {\n  log(`${(command === \"install\" ? \"Installing\" : \"Rebuilding\")} app dependencies for arch ${arch} to ${appDir}`)\n  const gypHome = path.join(os.homedir(), \".electron-gyp\")\n  return spawnNpmProduction(command, appDir, Object.assign({}, process.env, {\n      npm_config_disturl: \"https://atom.io/download/atom-shell\",\n      npm_config_target: electronVersion,\n      npm_config_runtime: \"electron\",\n      npm_config_arch: arch,\n      HOME: gypHome,\n      USERPROFILE: gypHome,\n    })\n  )\n}\n\nexport function spawnNpmProduction(command: string, appDir: string, env?: any): BluebirdPromise<any> {\n  let npmExecPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const npmExecArgs = [command, \"--production\"]\n  if (npmExecPath == null) {\n    npmExecPath = process.platform === \"win32\" ? \"npm.cmd\" : \"npm\"\n  }\n  else {\n    npmExecArgs.unshift(npmExecPath)\n    npmExecPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  return spawn(npmExecPath, npmExecArgs, {\n    cwd: appDir,\n    stdio: \"inherit\",\n    env: env || process.env\n  })\n}\n\nexport interface BaseExecOptions {\n  cwd?: string\n  env?: any\n  stdio?: any\n}\n\nexport interface ExecOptions extends BaseExecOptions {\n  customFds?: any\n  encoding?: string\n  timeout?: number\n  maxBuffer?: number\n  killSignal?: string\n}\n\nexport function exec(file: string, args?: Array<string> | null, options?: ExecOptions): BluebirdPromise<string> {\n  if (debug.enabled) {\n    debug(`Executing ${file} ${args == null ? \"\" : args.join(\" \")}`)\n  }\n\n  return new BluebirdPromise<string>((resolve, reject) => {\n    execFile(file, <any>args, options, function (error, stdout, stderr) {\n      if (error == null) {\n        resolve(stdout)\n      }\n      else {\n        if (stdout.length !== 0) {\n          console.log(stdout.toString())\n        }\n        if (stderr.length === 0) {\n          reject(error)\n        }\n        else {\n          reject(new Error(stderr.toString() + \"\\n\" + error.toString()))\n        }\n      }\n    })\n  })\n}\n\nexport function doSpawn(command: string, args: Array<string>, options?: SpawnOptions): ChildProcess {\n  if (debug.enabled) {\n    debug(`Spawning ${command} ${args.join(\" \")}`)\n  }\n  return _spawn(command, args, options)\n}\n\nexport function spawn(command: string, args?: Array<string> | null, options?: SpawnOptions): BluebirdPromise<any> {\n  return new BluebirdPromise<any>((resolve, reject) => {\n    const notNullArgs = args || []\n    const childProcess = doSpawn(command, notNullArgs, options)\n    handleProcess(\"close\", childProcess, command, resolve, reject)\n  })\n}\n\nexport function handleProcess(event: string, childProcess: ChildProcess, command: string, resolve: ((value?: any) => void) | null, reject: (reason?: any) => void) {\n  childProcess.on(\"error\", reject)\n  childProcess.on(event, (code: number) => {\n    if (debug.enabled) {\n      debug(`${command} (${childProcess.pid}) exited with code ${code}`)\n    }\n\n    if (code !== 0) {\n      reject(new Error(`${command} exited with code ${code}`))\n    }\n    else if (resolve != null) {\n      resolve()\n    }\n  })\n}\n\nexport async function getElectronVersion(packageData: any, packageJsonPath: string): Promise<string> {\n  const build = packageData.build\n  // build is required, but this check is performed later, so, we should check for null\n  if (build != null && build.electronVersion != null) {\n    return build.electronVersion\n  }\n  try {\n    return (await readJson(path.join(path.dirname(packageJsonPath), \"node_modules\", \"electron-prebuilt\", \"package.json\"))).version\n  }\n  catch (e) {\n    if (e.code !== \"ENOENT\") {\n      warn(\"Cannot read electron version from electron-prebuilt package.json\" + e.message)\n    }\n  }\n\n  const electronPrebuiltDep = findFromElectronPrebuilt(packageData)\n  if (electronPrebuiltDep == null) {\n    throw new Error(\"Cannot find electron-prebuilt dependency to get electron version in the '\" + packageJsonPath + \"'\")\n  }\n\n  const firstChar = electronPrebuiltDep[0]\n  return firstChar === \"^\" || firstChar === \"~\" ? electronPrebuiltDep.substring(1) : electronPrebuiltDep\n}\n\nfunction findFromElectronPrebuilt(packageData: any): any {\n  for (let name of [\"electron-prebuilt\", \"electron-prebuilt-compile\"]) {\n    const devDependencies = packageData.devDependencies\n    let electronPrebuiltDep = devDependencies == null ? null : devDependencies[name]\n    if (electronPrebuiltDep == null) {\n      const dependencies = packageData.dependencies\n      electronPrebuiltDep = dependencies == null ? null : dependencies[name]\n    }\n    if (electronPrebuiltDep != null) {\n      return electronPrebuiltDep\n    }\n  }\n  return null\n}\n\nexport async function statOrNull(file: string): Promise<Stats | null> {\n  try {\n    return await stat(file)\n  }\n  catch (e) {\n    if (e.code === \"ENOENT\") {\n      return null\n    }\n    else {\n      throw e\n    }\n  }\n}\n\nexport async function computeDefaultAppDirectory(projectDir: string, userAppDir: string | null | undefined): Promise<string> {\n  if (userAppDir != null) {\n    const absolutePath = path.join(projectDir, userAppDir)\n    const stat = await statOrNull(absolutePath)\n    if (stat == null) {\n      throw new Error(`Application directory ${userAppDir} doesn't exists`)\n    }\n    else if (!stat.isDirectory()) {\n      throw new Error(`Application directory ${userAppDir} is not a directory`)\n    }\n    return absolutePath\n  }\n\n  for (let dir of DEFAULT_APP_DIR_NAMES) {\n    const absolutePath = path.join(projectDir, dir)\n    const stat = await statOrNull(absolutePath)\n    if (stat != null && stat.isDirectory()) {\n      return absolutePath\n    }\n  }\n  return projectDir\n}\n\nexport function use<T, R>(value: T | null, task: (it: T) => R): R | null {\n  return value == null ? null : task(value)\n}\n\nexport function debug7zArgs(command: \"a\" | \"x\"): Array<string> {\n  const args = [command, \"-bd\"]\n  if (debug7z.enabled) {\n    args.push(\"-bb3\")\n  }\n  else if (!debug.enabled) {\n    args.push(\"-bb0\")\n  }\n  return args\n}\n\nlet tmpDirCounter = 0\n// add date to avoid use stale temp dir\nconst tempDirPrefix = `${process.pid.toString(36)}-${Date.now().toString(36)}`\n\nexport function getTempName(prefix?: string | n): string {\n  return `${prefix == null ? \"\" : prefix + \"-\"}${tempDirPrefix}-${(tmpDirCounter++).toString(36)}`\n}\n\nexport function isEmptyOrSpaces(s: string | n) {\n  return s == null || s.trim().length === 0\n}"
  ]
}

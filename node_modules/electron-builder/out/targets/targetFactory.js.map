{
  "version": 3,
  "file": "targetFactory.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/targetFactory.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,mCAAyC,AAEzC,AAAC,AAF6D;AAEjD,QAAa,gBAAG,CAAC,AAAK,OAAE,AAAK,OAAE,AAAI,MAAE,AAAQ,UAAE,AAAQ,UAAE,AAAQ,UAAE,AAAS,AAAC;AAC7E,QAAc,iBAAG,AAAS;AAC1B,QAAU,aAAG,AAAK;AAE/B,uBAA8B,AAAiC,cAAE,AAA0B,SAAE,AAAc,QAAE,AAA+B,UAAE,AAAuC;AACnL,UAAM,AAAM,SAAkB,AAAE;AAEhC,UAAM,AAAM,SAAG,CAAC,AAAY,MAAE,AAAmC;AAC/D,YAAI,AAAM,SAAG,AAAY,aAAC,AAAG,IAAC,AAAI,AAAC;AACnC,AAAE,AAAC,YAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACnB,AAAM,qBAAG,AAAO,QAAC,AAAM,AAAC;AACxB,AAAY,yBAAC,AAAG,IAAC,AAAI,MAAE,AAAM,AAAC,AAChC;AAAC;AACD,AAAM,eAAC,AAAI,KAAC,AAAM,AAAC,AACrB;AAAC;AAED,UAAM,AAAO,UAAG,AAAgB,iBAAC,AAAO,WAAI,AAAI,QAAI,AAAO,QAAC,AAAM,WAAK,AAAC,IAAG,AAAQ,SAAC,AAA4B,6BAAC,AAAM,SAAG,AAAO,AAAC;AAClI,AAAQ,aAAC,AAAa,cAAC,AAAO,WAAI,AAAI,OAAG,CAAC,QAAc,AAAC,kBAAG,AAAO,SAAE,AAAM,QAAE,AAAY,AAAC;AAC1F,AAAM,WAAC,AAAM,AACf;AAAC;AAfe,QAAa,gBAe5B;AAED,0BAA0B,AAAkD;AAC1E,AAAE,AAAC,QAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,AAAM,eAAC,AAAI,AACb;AAAC,AACD,AAAI,WAAC,AAAC;AACJ,AAAM,eAAC,CAAC,AAAK,MAAC,AAAO,QAAC,AAAO,AAAC,WAAG,AAAO,UAAG,CAAC,AAAO,AAAC,AAAC,UAAC,AAAG,IAAC,AAAE,MAAI,AAAE,GAAC,AAAW,AAAE,cAAC,AAAI,AAAE,AAAC,AAC1F;AAAC,AACH;AAAC;AAED,4BAAmC,AAAc;AAC/C,AAAE,AAAC,QAAC,EAAC,QAAa,cAAC,AAAQ,QAAC,AAAM,AAAC,AAAC,iBAAC,AAAC;AACpC,cAAM,IAAI,AAAK,AAAC,0BAAmB,AAAM,MAAE,AAAC,AAC9C;AAAC;AAED,AAAM,WAAC,IAAI,mBAAM,OAAC,AAAM,AAAC,AAC3B;AAAC;AANe,QAAkB,qBAMjC",
  "sourcesContent": [
    "import { PlatformPackager, Target } from \"../platformPackager\"\n\nexport const commonTargets = [\"dir\", \"zip\", \"7z\", \"tar.xz\", \"tar.lz\", \"tar.gz\", \"tar.bz2\"]\nexport const DEFAULT_TARGET = \"default\"\nexport const DIR_TARGET = \"dir\"\n\nexport function createTargets(nameToTarget: Map<String, Target>, rawList: Array<string> | n, outDir: string, packager: PlatformPackager<any>, cleanupTasks: Array<() => Promise<any>>): Array<Target> {\n  const result: Array<Target> = []\n\n  const mapper = (name: string, factory: (outDir: string) => Target) => {\n    let target = nameToTarget.get(name)\n    if (target == null) {\n      target = factory(outDir)\n      nameToTarget.set(name, target)\n    }\n    result.push(target)\n  }\n\n  const targets = normalizeTargets(rawList == null || rawList.length === 0 ? packager.platformSpecificBuildOptions.target : rawList)\n  packager.createTargets(targets == null ? [DEFAULT_TARGET] : targets, mapper, cleanupTasks)\n  return result\n}\n\nfunction normalizeTargets(targets: Array<string> | string | null | undefined): Array<string> | null {\n  if (targets == null) {\n    return null\n  }\n  else {\n    return (Array.isArray(targets) ? targets : [targets]).map(it => it.toLowerCase().trim())\n  }\n}\n\nexport function createCommonTarget(target: string): Target {\n  if (!commonTargets.includes(target)) {\n    throw new Error(`Unknown target: ${target}`)\n  }\n\n  return new Target(target)\n}"
  ]
}

{
  "version": 3,
  "file": "appImage.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/appImage.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import {  PlatformPackager, TargetEx } from \"../platformPackager\"\nimport { LinuxBuildOptions, Arch } from \"../metadata\"\nimport * as path from \"path\"\nimport { exec, unlinkIfExists } from \"../util/util\"\nimport { open, write, createReadStream, createWriteStream, close, chmod } from \"fs-extra-p\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { getBin } from \"../util/binDownload\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nconst appImageVersion = process.platform === \"darwin\" ? \"AppImage-09-07-16-mac\" : \"AppImage-09-07-16-linux\"\n//noinspection SpellCheckingInspection\nconst appImageSha256 = process.platform === \"darwin\" ? \"5d4a954876654403698a01ef5bd7f218f18826261332e7d31d93ab4432fa0312\" : \"ac324e90b502f4e995f6a169451dbfc911bb55c0077e897d746838e720ae0221\"\n//noinspection SpellCheckingInspection\nconst appImagePathPromise = getBin(\"AppImage\", appImageVersion, `https://dl.bintray.com/electron-userland/bin/${appImageVersion}.7z`, appImageSha256)\n\nexport default class AppImageTarget extends TargetEx {\n  private readonly desktopEntry: Promise<string>\n\n  constructor(private packager: PlatformPackager<LinuxBuildOptions>, private helper: LinuxTargetHelper, private outDir: string) {\n    super(\"appImage\")\n\n    this.desktopEntry = helper.computeDesktopEntry(\"AppRun\", `X-AppImage-Version=${packager.appInfo.buildVersion}`)\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    const packager = this.packager\n\n    // avoid spaces in the file name\n    const image = path.join(this.outDir, packager.generateName(\"AppImage\", arch, true))\n    const appInfo = packager.appInfo\n    await unlinkIfExists(image)\n\n    const appImagePath = await appImagePathPromise\n    const appExecutableImagePath = `/usr/bin/${appInfo.name}`\n    const args = [\n      \"-joliet\", \"on\",\n      \"-volid\", \"AppImage\",\n      \"-dev\", image,\n      \"-padding\", \"0\",\n      \"-map\", appOutDir, \"/usr/bin\",\n      \"-map\", path.join(__dirname, \"..\", \"..\", \"templates\", \"linux\", \"AppRun.sh\"), \"/AppRun\",\n      \"-map\", await this.desktopEntry, `/${appInfo.name}.desktop`,\n      \"-move\", `/usr/bin/${appInfo.productFilename}`, appExecutableImagePath,\n      // http://stackoverflow.com/questions/13633488/can-i-store-unix-permissions-in-a-zip-file-built-with-apache-ant, xorriso doesn't preserve it for zip, but we set it in any case\n      \"-chmod\", \"+x\", \"/AppRun\", appExecutableImagePath, \"--\",\n    ]\n    for (let [from, to] of (await this.helper.icons)) {\n      args.push(\"-map\", from, `/usr/share/icons/default/${to}`)\n    }\n\n    // must be after this.helper.icons call\n    if (this.helper.maxIconPath == null) {\n      throw new Error(\"Icon is not provided\")\n    }\n    args.push(\"-map\", this.helper.maxIconPath, \"/.DirIcon\")\n\n    args.push(\"-chown_r\", \"0\", \"/\", \"--\")\n    args.push(\"-zisofs\", `level=${packager.devMetadata.build.compression === \"store\" ? \"0\" : \"9\"}:block_size=128k:by_magic=off`)\n    args.push(\"set_filter_r\", \"--zisofs\", \"/\")\n\n    await exec(process.env.USE_SYSTEM_FPM === \"true\" || process.arch !== \"x64\" ? \"xorriso\" : path.join(appImagePath, \"xorriso\"), args)\n\n    await new BluebirdPromise((resolve, reject) => {\n      const rd = createReadStream(path.join(appImagePath, arch === Arch.ia32 ? \"32\" : \"64\", \"runtime\"))\n      rd.on(\"error\", reject)\n      const wr = createWriteStream(image, {flags: \"r+\"})\n      wr.on(\"error\", reject)\n      wr.on(\"finish\", resolve)\n      rd.pipe(wr)\n    })\n\n    const fd = await open(image, \"r+\")\n    try {\n      const magicData = new Buffer([0x41, 0x49, 0x01])\n      await write(fd, magicData, 0, magicData.length, 8)\n    }\n    finally {\n      await close(fd)\n    }\n\n    await chmod(image, \"0755\")\n\n    packager.dispatchArtifactCreated(image, packager.generateName(\"AppImage\", arch, true))\n  }\n}"
  ]
}

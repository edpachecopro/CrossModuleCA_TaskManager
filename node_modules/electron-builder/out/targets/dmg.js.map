{
  "version": 3,
  "file": "dmg.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/dmg.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { deepAssign } from \"../util/deepAssign\"\nimport * as path from \"path\"\nimport { log } from \"../util/log\"\nimport { Target, PlatformPackager } from \"../platformPackager\"\nimport { MacOptions, DmgOptions } from \"../metadata\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { debug, use } from \"../util/util\"\nimport appdmg = require(\"appdmg\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nexport class DmgTarget extends Target {\n  private readonly options: DmgOptions\n\n  constructor(private packager: PlatformPackager<MacOptions>) {\n    super(\"dmg\")\n\n    this.options = deepAssign({\n      title: packager.appInfo.productName,\n      \"icon-size\": 80,\n      contents: [\n        {\n          \"x\": 410, \"y\": 220, \"type\": \"link\", \"path\": \"/Applications\"\n        },\n        {\n          \"x\": 130, \"y\": 220, \"type\": \"file\"\n        }\n      ],\n      format: packager.devMetadata.build.compression === \"store\" ? \"UDRO\" : \"UDBZ\",\n    }, Object.assign({}, this.packager.devMetadata.build.osx, this.packager.devMetadata.build.dmg))\n  }\n\n  async build(appOutDir: string) {\n    const appInfo = this.packager.appInfo\n    const artifactPath = path.join(appOutDir, `${appInfo.productFilename}-${appInfo.version}.dmg`)\n    await new BluebirdPromise<any>(async(resolve, reject) => {\n      log(\"Creating DMG\")\n      const dmgOptions = {\n        target: artifactPath,\n        basepath: this.packager.projectDir,\n        specification: await this.computeDmgOptions(appOutDir),\n      }\n\n      if (debug.enabled) {\n        debug(`appdmg: ${JSON.stringify(dmgOptions, <any>null, 2)}`)\n      }\n\n      const emitter = appdmg(dmgOptions)\n      emitter.on(\"error\", reject)\n      emitter.on(\"finish\", () => resolve())\n      if (debug.enabled) {\n        emitter.on(\"progress\", (info: any) => {\n          if (info.type === \"step-begin\") {\n            debug(`appdmg: [${info.current}] ${info.title}`)\n          }\n        })\n      }\n    })\n\n    this.packager.dispatchArtifactCreated(artifactPath, `${appInfo.name}-${appInfo.version}.dmg`)\n  }\n\n  // public to test\n  async computeDmgOptions(appOutDir: string): Promise<appdmg.Specification> {\n    const packager = this.packager\n    const specification: any = this.options\n    if (!(\"icon\" in specification)) {\n      use(await packager.getIconPath(), it => {\n        specification.icon = it\n      })\n    }\n\n    if (!(\"background\" in specification)) {\n      const resourceList = await packager.resourceList\n      if (resourceList.includes(\"background.png\")) {\n        specification.background = path.join(packager.buildResourcesDir, \"background.png\")\n      }\n    }\n\n    specification.contents[1].path = path.join(appOutDir, `${packager.appInfo.productFilename}.app`)\n    return specification\n  }\n}"
  ]
}

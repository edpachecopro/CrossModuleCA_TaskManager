{
  "version": 3,
  "file": "squirrelPack.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/squirrelPack.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { remove, copy, createWriteStream, unlink, ensureDir } from \"fs-extra-p\"\nimport { spawn, exec } from \"../util/util\"\nimport { debug } from \"../util/util\"\nimport { WinPackager } from \"../winPackager\"\n\nconst archiverUtil = require(\"archiver-utils\")\nconst archiver = require(\"archiver\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nexport function convertVersion(version: string): string {\n  const parts = version.split(\"-\")\n  const mainVersion = parts.shift()\n  if (parts.length > 0) {\n    return [mainVersion, parts.join(\"-\").replace(/\\./g, \"\")].join(\"-\")\n  }\n  else {\n    return mainVersion!\n  }\n}\n\nfunction syncReleases(outputDirectory: string, options: SquirrelOptions) {\n  const args = prepareArgs([\"-u\", options.remoteReleases!, \"-r\", outputDirectory], path.join(options.vendorPath, \"SyncReleases.exe\"))\n  if (options.remoteToken) {\n    args.push(\"-t\", options.remoteToken)\n  }\n  return spawn(process.platform === \"win32\" ? path.join(options.vendorPath, \"SyncReleases.exe\") : \"mono\", args)\n}\n\nexport interface SquirrelOptions {\n  vendorPath: string\n  remoteReleases?: string\n  remoteToken?: string\n  loadingGif?: string\n  productName?: string\n  name: string\n  packageCompressionLevel?: number\n  version: string\n  msi?: any\n\n  owners?: string\n  description?: string\n  iconUrl?: string\n  authors?: string\n  extraMetadataSpecs?: string\n  copyright?: string\n}\n\nexport async function buildInstaller(options: SquirrelOptions, outputDirectory: string, setupExe: string, packager: WinPackager, appOutDir: string) {\n  const appUpdate = await packager.getTempFile(\"Update.exe\")\n  const promises = [\n    copy(path.join(options.vendorPath, \"Update.exe\"), appUpdate)\n      .then(() => packager.sign(appUpdate)),\n    remove(outputDirectory.replace(/\\\\/g, \"/\") + \"/*-full.nupkg\")\n      .then(() => ensureDir(outputDirectory))\n  ]\n  if (options.remoteReleases) {\n    promises.push(syncReleases(outputDirectory, options))\n  }\n  await BluebirdPromise.all(promises)\n\n  const embeddedArchiveFile = await packager.getTempFile(\"setup.zip\")\n  const embeddedArchive = archiver(\"zip\", {zlib: {level: options.packageCompressionLevel == null ? 6 : options.packageCompressionLevel}})\n  const embeddedArchiveOut = createWriteStream(embeddedArchiveFile)\n  const embeddedArchivePromise = new BluebirdPromise(function (resolve, reject) {\n    embeddedArchive.on(\"error\", reject)\n    embeddedArchiveOut.on(\"close\", resolve)\n  })\n  embeddedArchive.pipe(embeddedArchiveOut)\n\n  embeddedArchive.file(appUpdate, {name: \"Update.exe\"})\n  embeddedArchive.file(options.loadingGif ? path.resolve(options.loadingGif) : path.join(__dirname, \"..\", \"..\", \"templates\", \"install-spinner.gif\"), {name: \"background.gif\"})\n\n  const version = convertVersion(options.version)\n  const packageName = `${options.name}-${version}-full.nupkg`\n  const nupkgPath = path.join(outputDirectory, packageName)\n  const setupPath = path.join(outputDirectory, setupExe || `${options.name || options.productName}Setup.exe`)\n\n  await BluebirdPromise.all<any>([\n    pack(options, appOutDir, appUpdate, nupkgPath, version, options.packageCompressionLevel),\n    copy(path.join(options.vendorPath, \"Setup.exe\"), setupPath),\n  ])\n\n  embeddedArchive.file(nupkgPath, {name: packageName})\n\n  const releaseEntry = await releasify(options, nupkgPath, outputDirectory, packageName)\n\n  embeddedArchive.append(releaseEntry, {name: \"RELEASES\"})\n  embeddedArchive.finalize()\n  await embeddedArchivePromise\n\n  const writeZipToSetup = path.join(options.vendorPath, \"WriteZipToSetup.exe\")\n  await exec(process.platform === \"win32\" ? writeZipToSetup : \"wine\", prepareArgs([setupPath, embeddedArchiveFile], writeZipToSetup))\n\n  await packager.signAndEditResources(setupPath)\n  if (options.msi && process.platform === \"win32\") {\n    const outFile = setupExe.replace(\".exe\", \".msi\")\n    await msi(options, nupkgPath, setupPath, outputDirectory, outFile)\n    // rcedit can only edit .exe resources\n    await packager.sign(path.join(outputDirectory, outFile))\n  }\n}\n\nasync function pack(options: SquirrelOptions, directory: string, updateFile: string, outFile: string, version: string, packageCompressionLevel?: number) {\n  const archive = archiver(\"zip\", {zlib: {level: packageCompressionLevel == null ? 9 : packageCompressionLevel}})\n  const archiveOut = createWriteStream(outFile)\n  const archivePromise = new BluebirdPromise(function (resolve, reject) {\n    archive.on(\"error\", reject)\n    archiveOut.on(\"error\", reject)\n    archiveOut.on(\"close\", resolve)\n  })\n  archive.pipe(archiveOut)\n\n  const author = options.authors || options.owners\n  const copyright = options.copyright || `Copyright © ${new Date().getFullYear()} ${author}`\n  const nuspecContent = `<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\n  <metadata>\n    <id>${options.name}</id>\n    <version>${version}</version>\n    <title>${options.productName}</title>\n    <authors>${author}</authors>\n    <owners>${options.owners || options.authors}</owners>\n    <iconUrl>${options.iconUrl}</iconUrl>\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    <description>${options.description}</description>\n    <copyright>${copyright}</copyright>${options.extraMetadataSpecs || \"\"}\n  </metadata>\n</package>`\n  debug(`Created NuSpec file:\\n${nuspecContent}`)\n  archive.append(nuspecContent.replace(/\\n/, \"\\r\\n\"), {name: `${encodeURI(options.name).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\")}.nuspec`})\n\n  //noinspection SpellCheckingInspection\n  archive.append(`<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n  <Relationship Type=\"http://schemas.microsoft.com/packaging/2010/07/manifest\" Target=\"/${options.name}.nuspec\" Id=\"Re0\" />\n  <Relationship Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"/package/services/metadata/core-properties/1.psmdcp\" Id=\"Re1\" />\n</Relationships>`.replace(/\\n/, \"\\r\\n\"), {name: \".rels\", prefix: \"_rels\"})\n\n  //noinspection SpellCheckingInspection\n  archive.append(`<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\n  <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" />\n  <Default Extension=\"nuspec\" ContentType=\"application/octet\" />\n  <Default Extension=\"pak\" ContentType=\"application/octet\" />\n  <Default Extension=\"asar\" ContentType=\"application/octet\" />\n  <Default Extension=\"bin\" ContentType=\"application/octet\" />\n  <Default Extension=\"dll\" ContentType=\"application/octet\" />\n  <Default Extension=\"exe\" ContentType=\"application/octet\" />\n  <Default Extension=\"dat\" ContentType=\"application/octet\" />\n  <Default Extension=\"psmdcp\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\" />\n  <Override PartName=\"/lib/net45/LICENSE\" ContentType=\"application/octet\" />\n  <Default Extension=\"diff\" ContentType=\"application/octet\" />\n  <Default Extension=\"bsdiff\" ContentType=\"application/octet\" />\n  <Default Extension=\"shasum\" ContentType=\"text/plain\" />\n</Types>`.replace(/\\n/, \"\\r\\n\"), {name: \"[Content_Types].xml\"})\n\n  archive.append(`<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<coreProperties xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xmlns=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\">\n  <dc:creator>${author}</dc:creator>\n  <dc:description>${options.description}</dc:description>\n  <dc:identifier>${options.name}</dc:identifier>\n  <version>${version}</version>\n  <keywords/>\n  <dc:title>${options.productName}</dc:title>\n  <lastModifiedBy>NuGet, Version=2.8.50926.602, Culture=neutral, PublicKeyToken=null;Microsoft Windows NT 6.2.9200.0;.NET Framework 4</lastModifiedBy>\n</coreProperties>`.replace(/\\n/, \"\\r\\n\"), {name: \"1.psmdcp\", prefix: \"package/services/metadata/core-properties\"})\n\n  archive.file(updateFile, {name: \"Update.exe\", prefix: \"lib/net45\"})\n  encodedZip(archive, directory, \"lib/net45\")\n  await archivePromise\n}\n\nasync function releasify(options: SquirrelOptions, nupkgPath: string, outputDirectory: string, packageName: string) {\n  const args = [\n    \"--releasify\", nupkgPath,\n    \"--releaseDir\", outputDirectory\n  ]\n  const out = (await exec(process.platform === \"win32\" ? path.join(options.vendorPath, \"Update.com\") : \"mono\", prepareArgs(args, path.join(options.vendorPath, \"Update-Mono.exe\")))).trim()\n  if (debug.enabled) {\n    debug(out)\n  }\n\n  const lines = out.split(\"\\n\")\n  for (let i = lines.length - 1; i > -1; i--) {\n    const line = lines[i]\n    if (line.includes(packageName)) {\n      return line.trim()\n    }\n  }\n\n  throw new Error(\"Invalid output, cannot find last release entry\")\n}\n\nasync function msi(options: SquirrelOptions, nupkgPath: string, setupPath: string, outputDirectory: string, outFile: string) {\n  const args = [\n    \"--createMsi\", nupkgPath,\n    \"--bootstrapperExe\", setupPath\n  ]\n  await exec(process.platform === \"win32\" ? path.join(options.vendorPath, \"Update.com\") : \"mono\", prepareArgs(args, path.join(options.vendorPath, \"Update-Mono.exe\")))\n  //noinspection SpellCheckingInspection\n  await exec(path.join(options.vendorPath, \"candle.exe\"), [\"-nologo\", \"-ext\", \"WixNetFxExtension\", \"-out\", \"Setup.wixobj\", \"Setup.wxs\"], {\n    cwd: outputDirectory,\n  })\n  //noinspection SpellCheckingInspection\n  await exec(path.join(options.vendorPath, \"light.exe\"), [\"-ext\", \"WixNetFxExtension\", \"-sval\", \"-out\", outFile, \"Setup.wixobj\"], {\n    cwd: outputDirectory,\n  })\n\n  //noinspection SpellCheckingInspection\n  await BluebirdPromise.all([\n    unlink(path.join(outputDirectory, \"Setup.wxs\")),\n    unlink(path.join(outputDirectory, \"Setup.wixobj\")),\n    unlink(path.join(outputDirectory, outFile.replace(\".msi\", \".wixpdb\"))).catch(e => debug(e.toString())),\n  ])\n}\n\nfunction prepareArgs(args: Array<string>, exePath: string) {\n  if (process.platform !== \"win32\") {\n    args.unshift(exePath)\n  }\n  return args\n}\n\nfunction encodedZip(archive: any, dir: string, prefix: string) {\n  archiverUtil.walkdir(dir, function (error: any, files: any) {\n    if (error) {\n      archive.emit(\"error\", error)\n      return\n    }\n\n    for (let file of files) {\n      if (file.stats.isDirectory()) {\n        continue\n      }\n\n      // GBK file name encoding (or Non-English file name) caused a problem\n      const entryData = {\n        name: encodeURI(file.relative.replace(/\\\\/g, \"/\")).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\"),\n        prefix: prefix,\n        stats: file.stats,\n      }\n      archive._append(file.path, entryData)\n    }\n\n    archive.finalize()\n  })\n}"
  ]
}

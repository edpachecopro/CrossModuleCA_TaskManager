{
  "version": 3,
  "file": "LinuxTargetHelper.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/LinuxTargetHelper.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { readdir, outputFile, ensureDir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { exec, debug } from \"../util/util\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { LinuxBuildOptions } from \"../metadata\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../util/awaiter\")\n\nexport const installPrefix = \"/opt\"\n\nexport class LinuxTargetHelper {\n  readonly icons: Promise<Array<Array<string>>>\n\n  maxIconPath: string | null = null\n\n  constructor(private packager: PlatformPackager<LinuxBuildOptions>) {\n    this.icons = this.computeDesktopIcons()\n  }\n\n  // must be name without spaces and other special characters, but not product name used\n  private async computeDesktopIcons(): Promise<Array<Array<string>>> {\n    const resourceList = await this.packager.resourceList\n    if (resourceList.includes(\"icons\")) {\n      return this.iconsFromDir(path.join(this.packager.buildResourcesDir, \"icons\"))\n    }\n    else {\n      return this.createFromIcns(await this.packager.getTempFile(\"electron-builder-linux\").then(it => ensureDir(it).thenReturn(it)))\n    }\n  }\n\n  private async iconsFromDir(iconsDir: string) {\n    const mappings: Array<Array<string>> = []\n    let maxSize = 0\n    for (let file of (await readdir(iconsDir))) {\n      if (file.endsWith(\".png\") || file.endsWith(\".PNG\")) {\n        // If parseInt encounters a character that is not a numeral in the specified radix,\n        // it returns the integer value parsed up to that point\n        try {\n          const size = parseInt(file!, 10)\n          if (size > 0) {\n            const iconPath = `${iconsDir}/${file}`\n            mappings.push([iconPath, `${size}x${size}/apps/${this.packager.appInfo.name}.png`])\n\n            if (size > maxSize) {\n              maxSize = size\n              this.maxIconPath = iconPath\n            }\n          }\n        }\n        catch (e) {\n          console.error(e)\n        }\n      }\n    }\n    return mappings\n  }\n\n  private async getIcns(): Promise<string | null> {\n    const build = this.packager.devMetadata.build\n    let iconPath = (build.mac || {}).icon || build.icon\n    if (iconPath != null && !iconPath.endsWith(\".icns\")) {\n      iconPath += \".icns\"\n    }\n    return iconPath == null ? await this.packager.getDefaultIcon(\"icns\") : path.resolve(this.packager.projectDir, iconPath)\n  }\n\n  async computeDesktopEntry(exec?: string, extra?: string): Promise<string> {\n    const appInfo = this.packager.appInfo\n\n    const custom = this.packager.platformSpecificBuildOptions.desktop\n    if (custom != null) {\n      return custom\n    }\n\n    const productFilename = appInfo.productFilename\n    const tempFile = await this.packager.getTempFile(`${productFilename}.desktop`)\n    await outputFile(tempFile, this.packager.platformSpecificBuildOptions.desktop || `[Desktop Entry]\nName=${appInfo.productName}\nComment=${this.packager.platformSpecificBuildOptions.description || appInfo.description}\nExec=${(exec == null ? `\"${installPrefix}/${productFilename}/${productFilename}\"` : exec)}\nTerminal=false\nType=Application\nIcon=${appInfo.name}\n${extra == null ? \"\" : `${extra}\\n`}`)\n    return tempFile\n  }\n\n  private async createFromIcns(tempDir: string): Promise<Array<Array<string>>> {\n    const iconPath = await this.getIcns()\n    if (iconPath == null) {\n      return this.iconsFromDir(path.join(__dirname, \"..\", \"..\", \"templates\", \"linux\", \"electron-icons\"))\n    }\n\n    const output = await exec(\"icns2png\", [\"-x\", \"-o\", tempDir, iconPath])\n    debug(output)\n\n    //noinspection UnnecessaryLocalVariableJS\n    const imagePath = path.join(tempDir, \"icon_256x256x32.png\")\n\n    this.maxIconPath = imagePath\n\n    function resize(size: number): BluebirdPromise<any> {\n      const sizeArg = `${size}x${size}`\n      return exec(\"gm\", [\"convert\", \"-size\", sizeArg, imagePath, \"-resize\", sizeArg, path.join(tempDir, `icon_${size}x${size}x32.png`)])\n    }\n\n    const promises: Array<Promise<any>> = [resize(24), resize(96)]\n    if (!output.includes(\"is32\")) {\n      promises.push(resize(16))\n    }\n    if (!output.includes(\"ih32\")) {\n      promises.push(resize(48))\n    }\n    if (!output.toString().includes(\"icp6\")) {\n      promises.push(resize(64))\n    }\n    if (!output.includes(\"it32\")) {\n      promises.push(resize(128))\n    }\n\n    await BluebirdPromise.all(promises)\n\n    const appName = this.packager.appInfo.name\n\n    function createMapping(size: string) {\n      return [`${tempDir}/icon_${size}x${size}x32.png`, `${size}x${size}/apps/${appName}.png`]\n    }\n\n    return [\n      createMapping(\"16\"),\n      createMapping(\"24\"),\n      createMapping(\"32\"),\n      createMapping(\"48\"),\n      createMapping(\"64\"),\n      createMapping(\"96\"),\n      createMapping(\"128\"),\n      createMapping(\"256\"),\n      createMapping(\"512\"),\n    ]\n  }\n}"
  ]
}

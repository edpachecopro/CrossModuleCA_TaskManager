{
  "version": 3,
  "file": "metadata.js",
  "sourceRoot": "",
  "sources": [
    "../src/metadata.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { AsarOptions } from \"asar-electron-builder\"\nimport { ElectronPackagerOptions } from \"./packager/dirPackager\"\n\nexport interface Metadata {\n  readonly repository?: string | RepositoryInfo | null\n\n  dependencies?: { [key: string]: string }\n}\n\n/*\n # Application `package.json`\n */\nexport interface AppMetadata extends Metadata {\n  readonly version?: string\n\n  /*\n   The application name.\n   */\n  readonly name: string\n\n  /*\n   As [name](#AppMetadata-name), but allows you to specify a product name for your executable which contains spaces and other special characters\n   not allowed in the [name property](https://docs.npmjs.com/files/package.json#name}).\n   */\n  readonly productName?: string | null\n\n  /*\n   The application description.\n   */\n  readonly description?: string\n\n  readonly main?: string | null\n\n  readonly author?: AuthorMetadata\n\n  /*\n   The url to the project [homepage](https://docs.npmjs.com/files/package.json#homepage) (NuGet Package `projectUrl` (optional) or Linux Package URL (required)).\n\n   If not specified and your project repository is public on GitHub, it will be `https://github.com/${user}/${project}` by default.\n   */\n  readonly homepage?: string | null\n\n  /*\n   *linux-only.* The [license](https://docs.npmjs.com/files/package.json#license) name.\n   */\n  readonly license?: string | null\n}\n\n/*\n # Development `package.json`\n */\nexport interface DevMetadata extends Metadata {\n  /*\n   See [.build](#BuildMetadata).\n   */\n  readonly build: BuildMetadata\n\n  // deprecated\n  readonly homepage?: string | null\n\n  // deprecated\n  readonly license?: string | null\n\n  /*\n   See [.directories](#MetadataDirectories)\n   */\n  readonly directories?: MetadataDirectories | null\n}\n\nexport interface RepositoryInfo {\n  readonly url: string\n}\n\nexport interface AuthorMetadata {\n  readonly name: string\n  readonly email?: string\n}\n\nexport type CompressionLevel = \"store\" | \"normal\" | \"maximum\"\n\n/*\n ## `.build`\n */\nexport interface BuildMetadata {\n  /*\n  The application id. Used as\n  [CFBundleIdentifier](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-102070) for MacOS and as\n  [Application User Model ID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378459(v=vs.85).aspx) for Windows.\n\n  For windows only NSIS target supports it. Squirrel.Windows is not fixed yet.\n\n  Defaults to `com.electron.${name}`. It is strongly recommended that an explicit ID be set.\n   */\n  readonly appId?: string | null\n\n  /*\n   *macOS-only.* The application category type, as shown in the Finder via *View -> Arrange by Application Category* when viewing the Applications directory.\n\n   For example, `\"category\": \"public.app-category.developer-tools\"` will set the application category to *Developer Tools*.\n\n   Valid values are listed in [Apple's documentation](https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8).\n   */\n  readonly category?: string | null\n\n  /*\n  The human-readable copyright line for the app. Defaults to `Copyright Â© year author`.\n   */\n  readonly copyright?: string | null\n\n  /*\n   Whether to package the application's source code into an archive, using [Electron's archive format](https://github.com/electron/asar). Defaults to `true`.\n   Reasons why you may want to disable this feature are described in [an application packaging tutorial in Electron's documentation](http://electron.atom.io/docs/latest/tutorial/application-packaging/#limitations-on-node-api/).\n\n   Or you can pass object of any asar options.\n\n   Node modules, that must be unpacked, will be detected automatically, you don't need to explicitly set `asar.unpackDir` - please file issue if this doesn't work.\n   */\n  readonly asar?: AsarOptions | boolean | null\n\n  // deprecated\n  readonly iconUrl?: string | null\n\n  /*\n   See [AppMetadata.productName](#AppMetadata-productName).\n   */\n  readonly productName?: string | null\n\n  /**\n   A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the [app directory](#MetadataDirectories-app), which specifies which files to include when copying files to create the package.\n\n   See [File Patterns](#multiple-glob-patterns).\n   */\n  readonly files?: Array<string> | string | null\n\n  /**\n   A [glob patterns](https://www.npmjs.com/package/glob#glob-primer) relative to the project directory, when specified, copy the file or directory with matching names directly into the app's resources directory (`Contents/Resources` for MacOS, `resources` for Linux/Windows).\n\n   Glob rules the same as for [files](#multiple-glob-patterns).\n   */\n  readonly extraResources?: Array<string> | string | null\n\n  /**\n   The same as [extraResources](#BuildMetadata-extraResources) but copy into the app's content directory (`Contents` for MacOS, root directory for Linux/Windows).\n   */\n  readonly extraFiles?: Array<string> | string | null\n\n  /*\n  The file associations. See [.build.fileAssociations](#FileAssociation).\n   */\n  readonly fileAssociations?: Array<FileAssociation> | FileAssociation\n\n  /*\n  The URL protocol scheme(s) to associate the app with. See [.build.protocol](#Protocol).\n  */\n  readonly protocols?: Array<Protocol> | Protocol\n\n  /*\n   See [.build.mac](#MacOptions).\n   */\n  readonly mac?: MacOptions | null\n\n  /*\n   See [.build.dmg](#DmgOptions).\n   */\n  readonly dmg?: DmgOptions | null\n\n  // deprecated\n  readonly osx?: MacOptions | null\n\n  /*\n   See [.build.mas](#MasBuildOptions).\n   */\n  readonly mas?: MasBuildOptions | null\n\n  /**\n   See [.build.win](#WinBuildOptions).\n   */\n  readonly win?: WinBuildOptions  | null\n\n  /**\n   See [.build.nsis](#NsisOptions).\n   */\n  readonly nsis?: NsisOptions  | null\n\n  /*\n   See [.build.linux](#LinuxBuildOptions).\n   */\n  readonly linux?: LinuxBuildOptions | null\n\n  readonly deb?: LinuxBuildOptions | null\n\n  /*\n   The compression level, one of `store`, `normal`, `maximum` (default: `normal`). If you want to rapidly test build, `store` can reduce build time significantly.\n   */\n  readonly compression?: CompressionLevel | null\n\n  /*\n   *programmatic API only* The function to be run after pack (but before pack into distributable format and sign). Promise must be returned.\n   */\n  readonly afterPack?: (context: AfterPackContext) => Promise<any> | null\n\n  /*\n   *two package.json structure only* Whether to [rebuild](https://docs.npmjs.com/cli/rebuild) native dependencies (`npm rebuild`) before starting to package the app. Defaults to `true`.\n   */\n  readonly npmRebuild?: boolean\n\n  /*\n   Whether to execute `node-gyp rebuild` before starting to package the app. Defaults to `false`.\n   */\n  readonly nodeGypRebuild?: boolean\n\n  readonly icon?: string | null\n\n  // deprecated\n  readonly \"app-bundle-id\"?: string | null\n}\n\nexport interface AfterPackContext {\n  readonly appOutDir: string\n  readonly options: ElectronPackagerOptions\n}\n\n/*\n ### `.build.mac`\n\n MacOS specific build options.\n */\nexport interface MacOptions extends PlatformSpecificBuildOptions {\n  /*\n   Target package type: list of `default`, `dmg`, `mas`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`. Defaults to `default` (dmg and zip for Squirrel.Mac).\n  */\n  readonly target?: Array<string> | null\n\n  /*\n   The name of certificate to use when signing. Consider using environment variables [CSC_LINK or CSC_NAME](https://github.com/electron-userland/electron-builder/wiki/Code-Signing).\n   MAS installer identity is specified in the [.build.mas](#MasBuildOptions-identity).\n   */\n  readonly identity?: string | null\n\n  /*\n   The path to application icon. Defaults to `build/icon.icns` (consider using this convention instead of complicating your configuration).\n   */\n  readonly icon?: string | null\n\n  /*\n   The path to entitlements file for signing the app. `build/entitlements.mac.plist` will be used if exists (it is a recommended way to set).\n   MAS entitlements is specified in the [.build.mas](#MasBuildOptions-entitlements).\n   */\n  readonly entitlements?: string | null\n\n  /*\n   The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mac.inherit.plist` will be used if exists (it is a recommended way to set).\n   Otherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist).\n\n   This option only applies when signing with `entitlements` provided.\n   */\n  readonly entitlementsInherit?: string | null\n\n  /*\n  The `CFBundleVersion`. Do not use it unless [you need to](see (https://github.com/electron-userland/electron-builder/issues/565#issuecomment-230678643)).\n   */\n  readonly bundleVersion?: string | null\n}\n\n/*\n ### `.build.dmg`\n\n MacOS DMG specific options.\n\n See all [appdmg options](https://www.npmjs.com/package/appdmg#json-specification).\n */\nexport interface DmgOptions {\n  /*\n   The path to DMG icon, which will be shown when mounted. Defaults to `build/icon.icns`.\n   */\n  readonly icon?: string | null\n\n  /*\n   The path to background (default: `build/background.png` if exists). The resolution of this file determines the resolution of the installer window.\n   If background is not specified, use `window.size`, see [specification](https://github.com/LinusU/node-appdmg#json-specification).\n   */\n  readonly background?: string | null\n}\n\n/*\n ### `.build.mas`\n\n MAS (Mac Application Store) specific options (in addition to `build.mac`).\n */\nexport interface MasBuildOptions extends MacOptions {\n  /*\n   The path to entitlements file for signing the app. `build/entitlements.mas.plist` will be used if exists (it is a recommended way to set).\n   Otherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.plist).\n   */\n  readonly entitlements?: string | null\n\n  /*\n   The path to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. `build/entitlements.mas.inherit.plist` will be used if exists (it is a recommended way to set).\n   Otherwise [default](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.inherit.plist).\n   */\n  readonly entitlementsInherit?: string | null\n}\n\n/*\n ### `.build.win`\n\n Windows specific build options.\n */\nexport interface WinBuildOptions extends PlatformSpecificBuildOptions {\n  /*\n   Target package type: list of `squirrel`, `nsis`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`. Defaults to `squirrel`.\n  */\n  readonly target?: Array<string> | null\n\n  /*\n   *Squirrel.Windows-only.* A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n\n   Please note â [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n\n   * If you don't plan to build windows installer, you can omit it.\n   * If your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default.\n   */\n  readonly iconUrl?: string | null\n\n  /*\n   *Squirrel.Windows-only.* The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set)\n   (otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).\n   */\n  readonly loadingGif?: string | null\n\n  /*\n   *Squirrel.Windows-only.* Whether to create an MSI installer. Defaults to `false` (MSI is not created).\n   */\n  readonly msi?: boolean\n\n  /*\n   *Squirrel.Windows-only.* A URL to your existing updates. Or `true` to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates.\n   */\n  readonly remoteReleases?: string | boolean | null\n\n  /*\n   *Squirrel.Windows-only.* Authentication token for remote updates\n   */\n  readonly remoteToken?: string | null\n\n  /*\n   Array of signing algorithms used. Defaults to `['sha1', 'sha256']`\n   */\n  readonly signingHashAlgorithms?: Array<string> | null\n\n  /*\n   The path to application icon. Defaults to `build/icon.ico` (consider using this convention instead of complicating your configuration).\n   */\n  readonly icon?: string | null\n\n  readonly fileAssociations?: Array<FileAssociation> | FileAssociation\n\n  /*\n  The trademarks and registered trademarks.\n   */\n  readonly legalTrademarks?: string | null\n\n  readonly certificateFile?: string\n  readonly certificatePassword?: string\n\n  /*\n  The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows.\n   */\n  readonly certificateSubjectName?: string\n\n  /*\n  The URL of the RFC 3161 time stamp server. Defaults to `http://timestamp.comodoca.com/rfc3161`.\n   */\n  readonly rfc3161TimeStampServer?: string\n}\n\n/*\n ### `.build.nsis`\n\n NSIS target support in progress â not polished and not fully tested and checked.\n\n See [NSIS target notes](https://github.com/electron-userland/electron-builder/wiki/NSIS).\n */\nexport interface NsisOptions {\n  /*\n  One-click installation. Defaults to `true`.\n   */\n  readonly oneClick?: boolean | null\n\n  /*\n  Install per all users (per-machine). Defaults to `false`.\n   */\n  readonly perMachine?: boolean | null\n\n  /*\n   *boring installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions. Defaults to `true`.\n   */\n  readonly allowElevation?: boolean | null\n\n  /*\n   *one-click installer only.* Run application after finish. Defaults to `true`.\n   */\n  readonly runAfterFinish?: boolean | null\n\n  /*\n  See [GUID vs Application Name](https://github.com/electron-userland/electron-builder/wiki/NSIS#guid-vs-application-name).\n   */\n  readonly guid?: string | null\n\n  /*\n   *boring installer only.* `MUI_HEADERIMAGE`, relative to the project directory. Defaults to `build/installerHeader.bmp`\n   */\n  readonly installerHeader?: string | null\n\n  /*\n   *one-click installer only.* The path to header icon (above the progress bar), relative to the project directory. Defaults to `build/installerHeaderIcon.ico` or application icon.\n   */\n  readonly installerHeaderIcon?: string | null\n\n  /*\n  The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](https://github.com/electron-userland/electron-builder/wiki/NSIS#custom-nsis-script).\n   */\n  readonly include?: string | null\n\n  /*\n  The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](https://github.com/electron-userland/electron-builder/wiki/NSIS#custom-nsis-script).\n   */\n  readonly script?: string | null\n\n  /*\n   * Hex LCID, defaults to `1033`(`English - United States`, see https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx?f=255&MSPPError=-2147217396).\n   */\n  readonly language?: string | null\n}\n\n/*\n ### `.build.linux`\n\n Linux specific build options.\n */\nexport interface LinuxBuildOptions extends PlatformSpecificBuildOptions {\n  /*\n   As [description](#AppMetadata-description) from application package.json, but allows you to specify different for Linux.\n   */\n  readonly description?: string | null\n\n  /*\n   Target package type: list of `AppImage`, `deb`, `rpm`, `freebsd`, `pacman`, `p5p`, `apk`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`. Defaults to `deb`.\n\n   The most effective [xz](https://en.wikipedia.org/wiki/Xz) compression format used by default.\n\n   Only `deb` and `AppImage` is tested. Feel free to file issues for `rpm` and other package formats.\n   */\n  readonly target?: Array<string> | null\n\n  /*\n   *deb-only.* The [short description](https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Description).\n   */\n  readonly synopsis?: string | null\n\n  /*\n   The maintainer. Defaults to [author](#AppMetadata-author).\n   */\n  readonly maintainer?: string | null\n\n  /*\n   The vendor. Defaults to [author](#AppMetadata-author).\n   */\n  readonly vendor?: string | null\n\n  // should be not documented, only to experiment\n  readonly fpm?: Array<string> | null\n\n  //.desktop file template\n  readonly desktop?: string | null\n\n  readonly afterInstall?: string | null\n  readonly afterRemove?: string | null\n\n  /*\n  *deb-only.* The compression type, one of `gz`, `bzip2`, `xz`. Defaults to `xz`.\n   */\n  readonly compression?: string | null\n\n  /*\n   Package dependencies. Defaults to `[\"libappindicator1\", \"libnotify-bin\"]`.\n   */\n  readonly depends?: string[] | null\n}\n\n/*\n ### `.build.fileAssociations`\n\n NSIS only, [in progress](https://github.com/electron-userland/electron-builder/issues/409).\n */\nexport interface FileAssociation {\n  /*\n  The extension (minus the leading period). e.g. `png`.\n   */\n  readonly ext: string\n\n  /*\n   The name. e.g. `PNG`.\n   */\n  readonly name: string\n\n  /*\n   *windows-only.* The description.\n   */\n  readonly description?: string\n\n  /*\n   *windows-only.* The path to icon (`.ico`), relative to `build` (build resources directory). Defaults to `${ext}.ico`.\n   */\n  readonly icon?: string\n}\n\n/*\n ### `.build.protocols`\n\n macOS only.\n */\nexport interface Protocol {\n  /*\n   The name. e.g. `IRC server URL`.\n   */\n  readonly name: string\n\n  /*\n  The schemes. e.g. `[\"irc\", \"ircs\"]`.\n  */\n  readonly schemes: Array<string>\n}\n\n/*\n ## `.directories`\n */\nexport interface MetadataDirectories {\n  /*\n   The path to build resources, defaults to `build`.\n   */\n  readonly buildResources?: string | null\n\n  /*\n   The output directory, defaults to `dist`.\n   */\n  readonly output?: string | null\n\n  /*\n   The application directory (containing the application package.json), defaults to `app`, `www` or working directory.\n   */\n  readonly app?: string | null\n}\n\nexport interface PlatformSpecificBuildOptions {\n  readonly files?: Array<string> | null\n  readonly extraFiles?: Array<string> | null\n  readonly extraResources?: Array<string> | null\n\n  readonly asar?: AsarOptions | boolean\n\n  readonly target?: Array<string> | null\n\n  readonly icon?: string | null\n}\n\nexport class Platform {\n  static MAC = new Platform(\"mac\", \"mac\", \"darwin\")\n  static LINUX = new Platform(\"linux\", \"linux\", \"linux\")\n  static WINDOWS = new Platform(\"windows\", \"win\", \"win32\")\n\n  // deprecated\n  //noinspection JSUnusedGlobalSymbols\n  static OSX = Platform.MAC\n\n  constructor(public name: string, public buildConfigurationKey: string, public nodeName: string) {\n  }\n\n  toString() {\n    return this.name\n  }\n\n  toJSON() {\n    return this.name\n  }\n\n  createTarget(type?: string | Array<string> | null, ...archs: Array<Arch>): Map<Platform, Map<Arch, Array<string>>> {\n    const archToType = new Map()\n    if (this === Platform.MAC) {\n      archs = [Arch.x64]\n    }\n\n    for (let arch of (archs == null || archs.length === 0 ? [archFromString(process.arch)] : archs)) {\n      archToType.set(arch, type == null ? [] : (Array.isArray(type) ? type : [type]))\n    }\n    return new Map([[this, archToType]])\n  }\n\n  static current(): Platform {\n    return Platform.fromString(process.platform)\n  }\n\n  static fromString(name: string): Platform {\n    name = name.toLowerCase()\n    switch (name) {\n      case Platform.MAC.nodeName:\n      case Platform.MAC.name:\n      case \"osx\":\n        return Platform.MAC\n\n      case Platform.WINDOWS.nodeName:\n      case Platform.WINDOWS.name:\n      case Platform.WINDOWS.buildConfigurationKey:\n        return Platform.WINDOWS\n\n      case Platform.LINUX.nodeName:\n        return Platform.LINUX\n\n      default:\n        throw new Error(`Unknown platform: ${name}`)\n    }\n  }\n}\n\nexport enum Arch {\n  ia32, x64\n}\n\nexport function archToString(arch: Arch): string {\n  return arch === Arch.ia32 ? \"ia32\" : \"x64\"\n}\n\nexport function archFromString(name: string): Arch {\n  if (name === \"x64\") {\n    return Arch.x64\n  }\n  if (name === \"ia32\") {\n    return Arch.ia32\n  }\n\n  throw new Error(`Unsupported arch ${name}`)\n}\n"
  ]
}

{
  "version": 3,
  "file": "tmp.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/tmp.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,qBAAuB,AAAI,AAC3B,AAAC;AAAD,6BAA2C,AAAY,AACvD,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,uBAAiC,AAAQ,AACzC,AAAC;AAAD,2BAA2C,AAAU,AACrD,AAAC;AAAD,sBAAqB,AAAO,AAG5B,AAAC;AADD,AAAmC;AACnC,MAAM,AAAS,YAAG,AAAO,QAAC,AAAW,AAAC;AAEtC,MAAM,AAAO,UAAe,OAAG,IAAC,AAAO,QAAC,AAAI,AAAC,MAAC,AAAO,SAAE,AAAE,MAAI,WAAe,QAAC,AAAS,UAAC,AAAE,AAAC,AAAC;AAE3F;AAAA;AACU,aAAc,iBAAG,AAAC,AAqD5B;AAAC;AAhDC,AAAW,gBAAC,AAAc;AACxB,AAAE,AAAC,YAAC,AAAI,KAAC,AAAoB,wBAAI,AAAI,AAAC,MAAC,AAAC;AACtC,gBAAI,AAAgC;AACpC,AAAE,AAAC,gBAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,sBAAM,AAAG,MAAG,AAAI,KAAC,AAAI,KAAC,KAAM,AAAE,UAAE,OAAW,YAAC,AAAkB,AAAC,AAAC;AAChE,AAAO,0BAAG,aAAM,OAAC,AAAG,KAAE,EAAC,AAAI,MAAE,AAAG,AAAC,AAAC,OAAC,AAAU,WAAC,AAAG,AAAC,AACpD;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAO,0BAAG,AAAO,AAAC,YAAG,AAAI,KAAC,AAAI,KAAC,KAAM,AAAE,UAAE,AAAkB,AAAC,mBAAG,AAAC,AAClE;AAAC;AAED,AAAI,iBAAC,AAAoB,+BACtB,AAAI,KAAC,AAAG;AACP,AAAI,qBAAC,AAAG,MAAG,AAAG;AACd,AAAO,wBAAC,AAAE,GAAC,AAAQ,UAAE;AACnB,AAAE,AAAC,wBAAC,AAAI,KAAC,AAAG,OAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAM,AACR;AAAC;AAED,AAAI,yBAAC,AAAG,MAAG,AAAI;AACf,wBAAI,AAAC;AACH,qCAAU,WAAC,AAAG,AAAC,AACjB;AACA,sBAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,8BAAI,AAAC,sCAAgC,AAAG,WAAM,CAAC,AAAC,EAAC,AAAK,SAAI,AAAC,AAAC,GAAC,AAAQ,AAAE,UAAE,AAAC,AAC5E;AAAC,AACH;AAAC,AAAC;AACF,AAAM,uBAAC,AAAG,AACZ;AAAC,AAAC,AACN,aAlB8B,AAAO;AAkBpC;AAED,AAAM,eAAC,AAAI,KAAC,AAAoB,qBAC7B,AAAI,KAAC,AAAE,MAAI,AAAI,KAAC,AAAI,KAAC,AAAE,AAAE,QAAG,CAAC,AAAI,KAAC,AAAc,AAAE,AAAC,kBAAC,AAAQ,SAAC,AAAE,AAAC,QAAG,AAAM,OAAC,AAAU,WAAC,AAAG,AAAC,OAAG,AAAM,AAAG,cAAI,AAAM,MAAE,GAAE,AAAC,AAAC,AAC1H;AAAC;AAED,AAAO;AACL,AAAE,AAAC,YAAC,AAAI,KAAC,AAAG,OAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAM,mBAAC,WAAe,QAAC,AAAO,AAAE,AAClC;AAAC;AAED,AAAM,4BAAO,OAAC,AAAI,KAAC,AAAG,AAAC,KACpB,AAAI,KAAC;AACJ,AAAI,iBAAC,AAAG,MAAG,AAAI,AACjB;AAAC,AAAC,SAHG,EAIJ,AAAK,MAAC,AAAC;AACN,kBAAI,AAAC,sCAAgC,AAAI,KAAC,AAAG,WAAM,CAAC,AAAC,EAAC,AAAK,SAAI,AAAC,AAAC,GAAC,AAAQ,AAAE,UAAE,AAAC,AACjF;AAAC,AAAC,AACN;AAAC,AACH,AAAC;;AAtDY,QAAM,SAsDlB",
  "sourcesContent": [
    "import { tmpdir } from \"os\"\nimport { remove, mkdirs, removeSync } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { getTempName, use } from \"./util\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { warn } from \"./log\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nconst mkdtemp: any | null = use(require(\"fs\").mkdtemp, it => BluebirdPromise.promisify(it))\n\nexport class TmpDir {\n  private tmpFileCounter = 0\n  private tempDirectoryPromise: BluebirdPromise<string>\n\n  private dir: string | null\n\n  getTempFile(suffix: string): BluebirdPromise<string> {\n    if (this.tempDirectoryPromise == null) {\n      let promise: BluebirdPromise<string>\n      if (mkdtemp == null) {\n        const dir = path.join(tmpdir(), getTempName(\"electron-builder\"))\n        promise = mkdirs(dir, {mode: 448}).thenReturn(dir)\n      }\n      else {\n        promise = mkdtemp(`${path.join(tmpdir(), \"electron-builder\")}-`)\n      }\n\n      this.tempDirectoryPromise = promise\n        .then(dir => {\n          this.dir = dir\n          process.on(\"SIGINT\", () => {\n            if (this.dir == null) {\n              return\n            }\n\n            this.dir = null\n            try {\n              removeSync(dir)\n            }\n            catch (e) {\n              warn(`Cannot delete temporary dir \"${dir}\": ${(e.stack || e).toString()}`)\n            }\n          })\n          return dir\n        })\n    }\n\n    return this.tempDirectoryPromise\n      .then(it => path.join(it, `${(this.tmpFileCounter++).toString(16)}${suffix.startsWith(\".\") ? suffix : `-${suffix}`}`))\n  }\n\n  cleanup(): Promise<any> {\n    if (this.dir == null) {\n      return BluebirdPromise.resolve()\n    }\n\n    return remove(this.dir)\n      .then(() => {\n        this.dir = null\n      })\n      .catch(e => {\n        warn(`Cannot delete temporary dir \"${this.dir}\": ${(e.stack || e).toString()}`)\n      })\n  }\n}\n"
  ]
}

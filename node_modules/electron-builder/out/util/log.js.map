{
  "version": 3,
  "file": "log.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/log.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { yellow, green, blue } from \"chalk\"\nimport WritableStream = NodeJS.WritableStream\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { eraseLines } from \"ansi-escapes\"\nimport * as cursor from \"cli-cursor\"\nimport prettyMs = require(\"pretty-ms\")\n\ninterface Line {\n  // text must be \\n terminated\n  readonly text: string\n\n  readonly promise?: BluebirdPromise<any>\n}\n\nclass SimpleLine implements Line {\n  //noinspection JSUnusedGlobalSymbols\n  constructor(public text: string, public promise?: BluebirdPromise<any>) {\n  }\n}\n\nclass Task implements Line {\n  private readonly start = process.hrtime()\n\n  constructor(public text: string, private rawText: string, public promise?: BluebirdPromise<any>) {\n  }\n\n  done() {\n    const duration = process.hrtime(this.start)\n    const ms = duration[0] * 1000 + duration[1] / 1e6\n    this.text = `${this.rawText} ${green(prettyMs(ms))}\\n`\n  }\n}\n\nclass Logger {\n  private lines: Array<Line> = []\n  private logTime = process.env.LOG_TIME === \"true\"\n\n  constructor(private stream: WritableStream) {\n  }\n\n  warn(message: string): void {\n   this.log(yellow(`Warning: ${message}`))\n  }\n\n  log(message: string): void {\n    const text = `${message}\\n`\n    if (this.lines.length === 0) {\n      this.stream.write(text)\n    }\n    else {\n      this.lines.push(new SimpleLine(text))\n      this.render()\n    }\n  }\n\n  subTask(title: string, _promise: BluebirdPromise<any> | Promise<any>): BluebirdPromise<any> {\n    if (!this.logTime) {\n      return <BluebirdPromise<any>>_promise\n    }\n    return this.task(title, _promise)\n  }\n\n  task(title: string, _promise: BluebirdPromise<any> | Promise<any>): BluebirdPromise<any> {\n    const promise = <BluebirdPromise<any>>_promise\n\n    if (!this.logTime) {\n      this.log(`${title}\\n`)\n      return promise\n    }\n\n    const task = new Task(blue(title) + \"\\n\", title, promise)\n    this.lines.push(task)\n    promise\n      .then(() => {\n        task.done()\n        this.render()\n      })\n\n    this.render()\n\n    return promise\n  }\n\n  private render() {\n    const prevLineCount = this.lines.length\n    if (prevLineCount === 0) {\n      cursor.show()\n      return\n    }\n\n    cursor.hide()\n\n    let out = \"\"\n    let firstPendingLineIndex = 0\n    while (firstPendingLineIndex < prevLineCount) {\n      let line = this.lines[firstPendingLineIndex]\n      if (line.promise == null || !line.promise.isPending()) {\n        out += line.text\n        firstPendingLineIndex++\n      }\n      else {\n        break\n      }\n    }\n\n    if (firstPendingLineIndex > 0) {\n      if (this.lines.length === firstPendingLineIndex) {\n        this.lines.length = 0\n        this.stream.write(eraseLines(prevLineCount) + out)\n        cursor.show()\n        return\n      }\n\n      this.lines.splice(0, firstPendingLineIndex)\n    }\n\n    for (let line of this.lines) {\n      out += line.text\n    }\n\n    this.stream.write(eraseLines(prevLineCount) + out)\n  }\n}\n\nconst logger = new Logger(process.stdout)\n\nexport function warn(message: string) {\n  logger.warn(message)\n}\n\nexport function log(message: string) {\n  logger.log(message)\n}\n\nexport function subTask(title: string, promise: BluebirdPromise<any> | Promise<any>): BluebirdPromise<any> {\n  return logger.subTask(title, promise)\n}\n\nexport function task(title: string, promise: BluebirdPromise<any> | Promise<any>): BluebirdPromise<any> {\n  return logger.task(title, promise)\n}"
  ]
}

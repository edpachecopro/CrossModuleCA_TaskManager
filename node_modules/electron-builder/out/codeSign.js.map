{
  "version": 3,
  "file": "codeSign.js",
  "sourceRoot": "",
  "sources": [
    "../src/codeSign.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { exec, getTempName, isEmptyOrSpaces } from \"./util/util\"\nimport { deleteFile, outputFile, copy, rename } from \"fs-extra-p\"\nimport { download } from \"./util/httpRequest\"\nimport * as path from \"path\"\nimport { executeFinally, all } from \"./util/promise\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { randomBytes } from \"crypto\"\nimport { homedir } from \"os\"\nimport { TmpDir } from \"./util/tmp\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./util/awaiter\")\n\nconst appleCertificatePrefixes = [\"Developer ID Application:\", \"3rd Party Mac Developer Application:\", \"Developer ID Installer:\", \"3rd Party Mac Developer Installer:\"]\n\nexport type CertType = \"Developer ID Application\" | \"3rd Party Mac Developer Application\" | \"Developer ID Installer\" | \"3rd Party Mac Developer Installer\"\n\nexport interface CodeSigningInfo {\n  keychainName?: string | null\n}\n\nexport function downloadCertificate(urlOrBase64: string, tmpDir: TmpDir): BluebirdPromise<string> {\n  if (urlOrBase64.startsWith(\"file://\")) {\n    return BluebirdPromise.resolve(urlOrBase64.substring(\"file://\".length))\n  }\n\n  return tmpDir.getTempFile(\".p12\")\n    .then(tempFile => (urlOrBase64.startsWith(\"https://\") ? download(urlOrBase64, tempFile) : outputFile(tempFile, new Buffer(urlOrBase64, \"base64\"))).thenReturn(tempFile))\n}\n\nlet bundledCertKeychainAdded: Promise<any> | null = null\n\n// \"Note that filename will not be searched to resolve the signing identity's certificate chain unless it is also on the user's keychain search list.\"\n// but \"security list-keychains\" doesn't support add - we should 1) get current list 2) set new list - it is very bad http://stackoverflow.com/questions/10538942/add-a-keychain-to-search-list\n// \"overly complicated and introduces a race condition.\"\n// https://github.com/electron-userland/electron-builder/issues/398\nasync function createCustomCertKeychain() {\n  // copy to temp and then atomic rename to final path\n  const tmpKeychainPath = path.join(homedir(), \".cache\", getTempName(\"electron_builder_root_certs\"))\n  const keychainPath = path.join(homedir(), \".cache\", \"electron_builder_root_certs.keychain\")\n  const results = await BluebirdPromise.all<string>([\n    exec(\"security\", [\"list-keychains\"]),\n    copy(path.join(__dirname, \"..\", \"certs\", \"root_certs.keychain\"), tmpKeychainPath)\n      .then(() => rename(tmpKeychainPath, keychainPath)),\n  ])\n  const list = results[0]\n    .split(\"\\n\")\n    .map(it => {\n      let r = it.trim()\n      return r.substring(1, r.length - 1)\n    })\n    .filter(it => it.length > 0)\n\n  if (!list.includes(keychainPath)) {\n    await exec(\"security\", [\"list-keychains\", \"-d\", \"user\", \"-s\", keychainPath].concat(list))\n  }\n}\n\nexport async function createKeychain(tmpDir: TmpDir, cscLink: string, cscKeyPassword: string, cscILink?: string | null, cscIKeyPassword?: string | null): Promise<CodeSigningInfo> {\n  if (bundledCertKeychainAdded == null) {\n    bundledCertKeychainAdded = createCustomCertKeychain()\n  }\n  await bundledCertKeychainAdded\n\n  const keychainName = await tmpDir.getTempFile(\".keychain\")\n\n  const certLinks = [cscLink]\n  if (cscILink != null) {\n    certLinks.push(cscILink)\n  }\n\n  const certPaths = new Array(certLinks.length)\n  const keychainPassword = randomBytes(8).toString(\"hex\")\n  return await executeFinally(BluebirdPromise.all([\n      BluebirdPromise.map(certLinks, (link, i) => downloadCertificate(link, tmpDir).then(it => certPaths[i] = it)),\n      BluebirdPromise.mapSeries([\n        [\"create-keychain\", \"-p\", keychainPassword, keychainName],\n        [\"unlock-keychain\", \"-p\", keychainPassword, keychainName],\n        [\"set-keychain-settings\", \"-t\", \"3600\", \"-u\", keychainName]\n      ], it => exec(\"security\", it))\n    ])\n    .then<CodeSigningInfo>(() => importCerts(keychainName, certPaths, <Array<string>>[cscKeyPassword, cscIKeyPassword].filter(it => it != null))),\n    () => all(certPaths.map((it, index) => certLinks[index].startsWith(\"https://\") ? deleteFile(it, true) : BluebirdPromise.resolve())))\n}\n\nasync function importCerts(keychainName: string, paths: Array<string>, keyPasswords: Array<string>): Promise<CodeSigningInfo> {\n  for (let i = 0; i < paths.length; i++) {\n    await exec(\"security\", [\"import\", paths[i], \"-k\", keychainName, \"-T\", \"/usr/bin/codesign\", \"-T\", \"/usr/bin/productbuild\", \"-P\", keyPasswords[i]])\n  }\n\n  return {\n    keychainName: keychainName,\n  }\n}\n\nexport function sign(path: string, name: string, keychain: string): BluebirdPromise<any> {\n  const args = [\"--deep\", \"--force\", \"--sign\", name, path]\n  if (keychain != null) {\n    args.push(\"--keychain\", keychain)\n  }\n  return exec(\"codesign\", args)\n}\n\nexport let findIdentityRawResult: Promise<Array<string>> | null = null\n\nasync function getValidIdentities(keychain?: string | null): Promise<Array<string>> {\n  function addKeychain(args: Array<string>) {\n    if (keychain != null) {\n      args.push(keychain)\n    }\n    return args\n  }\n\n  let result = findIdentityRawResult\n  if (result == null || keychain != null) {\n    // https://github.com/electron-userland/electron-builder/issues/481\n    // https://github.com/electron-userland/electron-builder/issues/535\n    result = BluebirdPromise.all<Array<string>>([\n      exec(\"security\", addKeychain([\"find-identity\", \"-v\"]))\n        .then(it => it.trim().split(\"\\n\").filter(it => {\n          for (let prefix of appleCertificatePrefixes) {\n            if (it.includes(prefix)) {\n              return true\n            }\n          }\n          return false\n        })),\n      exec(\"security\", addKeychain([\"find-identity\", \"-v\", \"-p\", \"codesigning\"]))\n        .then(it => it.trim().split((\"\\n\"))),\n    ])\n      .then(it => {\n        const array = it[0].concat(it[1])\n          .filter(it => !it.includes(\"(Missing required extension)\") && !it.includes(\"valid identities found\") && !it.includes(\"iPhone \") && !it.includes(\"com.apple.idms.appleid.prd.\"))\n          // remove 1)\n          .map(it => it.substring(it.indexOf(\")\") + 1).trim())\n        return Array.from(new Set(array))\n      })\n\n    if (keychain == null) {\n      findIdentityRawResult = result\n    }\n  }\n  return result\n}\n\nasync function _findIdentity(namePrefix: CertType, qualifier?: string | null, keychain?: string | null): Promise<string | null> {\n  // https://github.com/electron-userland/electron-builder/issues/484\n  //noinspection SpellCheckingInspection\n  const lines = await getValidIdentities(keychain)\n  for (let line of lines) {\n    if (qualifier != null && !line.includes(qualifier)) {\n      continue\n    }\n\n    if (line.includes(namePrefix)) {\n      return line.substring(line.indexOf('\"') + 1, line.lastIndexOf('\"'))\n    }\n  }\n\n  if (namePrefix === \"Developer ID Application\") {\n    // find non-Apple certificate\n    // https://github.com/electron-userland/electron-builder/issues/458\n    l: for (let line of lines) {\n      if (qualifier != null && !line.includes(qualifier)) {\n        continue\n      }\n\n      for (let prefix of appleCertificatePrefixes) {\n        if (line.includes(prefix)) {\n          continue l\n        }\n      }\n\n      return line.substring(line.indexOf('\"') + 1, line.lastIndexOf('\"'))\n    }\n  }\n  return null\n}\n\nexport async function findIdentity(certType: CertType, qualifier?: string | null, keychain?: string | null): Promise<string | null> {\n  let identity = process.env.CSC_NAME || qualifier\n  if (isEmptyOrSpaces(identity)) {\n    if (keychain == null && process.env.CI == null && process.env.CSC_IDENTITY_AUTO_DISCOVERY === \"false\") {\n      return null\n    }\n    return await _findIdentity(certType, null, keychain)\n  }\n  else {\n    identity = identity.trim()\n    for (let prefix of appleCertificatePrefixes) {\n      checkPrefix(identity, prefix)\n    }\n    const result = await _findIdentity(certType, identity, keychain)\n    if (result == null) {\n      throw new Error(`Identity name \"${identity}\" is specified, but no valid identity with this name in the keychain`)\n    }\n    return result\n  }\n}\n\nfunction checkPrefix(name: string, prefix: string) {\n  if (name.startsWith(prefix)) {\n    throw new Error(`Please remove prefix \"${prefix}\" from the specified name — appropriate certificate will be chosen automatically`)\n  }\n}"
  ]
}

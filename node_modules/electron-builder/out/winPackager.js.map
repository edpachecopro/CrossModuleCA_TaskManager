{
  "version": 3,
  "file": "winPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/winPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { downloadCertificate } from \"./codeSign\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { PlatformPackager, BuildInfo, getArchSuffix } from \"./platformPackager\"\nimport { Platform, WinBuildOptions, Arch } from \"./metadata\"\nimport * as path from \"path\"\nimport { log, warn } from \"./util\"\nimport { deleteFile, open, close, read } from \"fs-extra-p\"\nimport { sign, SignOptions } from \"signcode-tf\"\nimport { ElectronPackagerOptions } from \"electron-packager-tf\"\nimport SquirrelWindowsTarget from \"./targets/squirrelWindows\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport interface FileCodeSigningInfo {\n  readonly file: string\n  readonly password?: string | null\n}\n\nexport class WinPackager extends PlatformPackager<WinBuildOptions> {\n  readonly cscInfo: Promise<FileCodeSigningInfo | null>\n\n  readonly iconPath: Promise<string>\n\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\n    super(info)\n\n    const certificateFile = this.customBuildOptions.certificateFile\n    if (certificateFile != null) {\n      const certificatePassword = this.customBuildOptions.certificatePassword || this.getCscPassword()\n      this.cscInfo = BluebirdPromise.resolve({\n        file: certificateFile,\n        password: certificatePassword == null ? null : certificatePassword.trim(),\n      })\n    }\n    else if (this.options.cscLink != null) {\n      this.cscInfo = downloadCertificate(this.options.cscLink)\n        .then(path => {\n          cleanupTasks.push(() => deleteFile(path, true))\n          return {\n            file: path,\n            password: this.getCscPassword(),\n          }\n        })\n    }\n    else {\n      this.cscInfo = BluebirdPromise.resolve(null)\n    }\n\n    this.iconPath = this.getValidIconPath()\n  }\n\n  get platform() {\n    return Platform.WINDOWS\n  }\n\n  get supportedTargets(): Array<string> {\n    return [\"squirrel\"]\n  }\n\n  private async getValidIconPath(): Promise<string> {\n    const iconPath = path.join(this.buildResourcesDir, \"icon.ico\")\n    await checkIcon(iconPath)\n    return iconPath\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<string>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    if (arch === Arch.ia32) {\n      warn(\"For windows consider only distributing 64-bit, see https://github.com/electron-userland/electron-builder/issues/359#issuecomment-214851130\")\n    }\n\n    // we must check icon before pack because electron-packager uses icon and it leads to cryptic error message \"spawn wine ENOENT\"\n    await this.iconPath\n\n    const appOutDir = this.computeAppOutDir(outDir, arch)\n    const packOptions = this.computePackOptions(outDir, appOutDir, arch)\n\n    await this.doPack(packOptions, outDir, appOutDir, arch, this.customBuildOptions)\n    await this.sign(appOutDir)\n    this.packageInDistributableFormat(outDir, appOutDir, arch, packOptions, targets, postAsyncTasks)\n  }\n\n  protected computeAppOutDir(outDir: string, arch: Arch): string {\n    return path.join(outDir, `win${getArchSuffix(arch)}-unpacked`)\n  }\n\n  protected async sign(appOutDir: string) {\n    const cscInfo = await this.cscInfo\n    if (cscInfo != null) {\n      const filename = `${this.appName}.exe`\n      log(`Signing ${filename} (certificate file \"${cscInfo.file}\")`)\n      await this.doSign({\n        path: path.join(appOutDir, filename),\n        cert: cscInfo.file,\n        password: cscInfo.password!,\n        name: this.appName,\n        site: await this.computePackageUrl(),\n        overwrite: true,\n        hash: this.customBuildOptions.signingHashAlgorithms,\n      })\n    }\n  }\n\n  protected async doSign(opts: SignOptions): Promise<any> {\n    return BluebirdPromise.promisify(sign)(opts)\n  }\n\n  protected packageInDistributableFormat(outDir: string, appOutDir: string, arch: Arch, packOptions: ElectronPackagerOptions, targets: Array<string>, promises: Array<Promise<any>>): void {\n    for (let target of targets) {\n      if (target === \"squirrel.windows\" || target === \"default\") {\n        const helperClass: typeof SquirrelWindowsTarget = require(\"./targets/squirrelWindows\").default\n        promises.push(new helperClass(this, appOutDir, arch).build(packOptions))\n      }\n      else {\n        log(`Creating Windows ${target}`)\n        // we use app name here - see https://github.com/electron-userland/electron-builder/pull/204\n        const outFile = path.join(outDir, `${this.appName}-${this.metadata.version}${getArchSuffix(arch)}-win.${target}`)\n        promises.push(this.archiveApp(target, appOutDir, outFile)\n          .then(() => this.dispatchArtifactCreated(outFile, `${this.metadata.name}-${this.metadata.version}${getArchSuffix(arch)}-win.${target}`)))\n      }\n    }\n  }\n}\n\nasync function checkIcon(file: string): Promise<void> {\n  const fd = await open(file, \"r\")\n  const buffer = new Buffer(512)\n  try {\n    await read(fd, buffer, 0, buffer.length, 0)\n  }\n  finally {\n    await close(fd)\n  }\n\n  if (!isIco(buffer)) {\n    throw new Error(`Windows icon is not valid ico file, please fix \"${file}\"`)\n  }\n\n  const sizes = parseIco(buffer)\n  for (let size of sizes) {\n    if (size!.w >= 256 && size!.h >= 256) {\n      return\n    }\n  }\n\n  throw new Error(`Windows icon size must be at least 256x256, please fix \"${file}\"`)\n}\n\ninterface Size {\n  w: number\n  h: number\n}\n\nfunction parseIco(buffer: Buffer): Array<Size> {\n  if (!isIco(buffer)) {\n    throw new Error(\"buffer is not ico\")\n  }\n\n  const n = buffer.readUInt16LE(4)\n  const result = new Array<Size>(n)\n  for (let i = 0; i < n; i++) {\n    result[i] = {\n      w: buffer.readUInt8(6 + i * 16) || 256,\n      h: buffer.readUInt8(7 + i * 16) || 256,\n    }\n  }\n  return result\n}\n\nfunction isIco(buffer: Buffer): boolean {\n  return buffer.readUInt16LE(0) === 0 && buffer.readUInt16LE(2) === 1\n}"
  ]
}

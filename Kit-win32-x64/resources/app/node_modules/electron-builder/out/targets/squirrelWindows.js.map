{
  "version": 3,
  "file": "squirrelWindows.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/squirrelWindows.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { WinPackager } from \"../winPackager\"\nimport { getArchSuffix, smarten } from \"../platformPackager\"\nimport { ElectronPackagerOptions } from \"electron-packager-tf\"\nimport { Arch, WinBuildOptions } from \"../metadata\"\nimport { createWindowsInstaller, convertVersion } from \"electron-winstaller-fixed\"\nimport * as path from \"path\"\nimport { warn } from \"../util\"\nimport { emptyDir } from \"fs-extra-p\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../awaiter\")\n\nexport default class SquirrelWindowsTarget {\n  constructor(private packager: WinPackager, private appOutDir: string, private arch: Arch) {\n  }\n\n  async build(packOptions: ElectronPackagerOptions) {\n    const version = this.packager.metadata.version\n    const archSuffix = getArchSuffix(this.arch)\n    const setupExeName = `${this.packager.appName} Setup ${version}${archSuffix}.exe`\n\n    const installerOutDir = path.join(this.appOutDir, \"..\", `win${getArchSuffix(this.arch)}`)\n    await emptyDir(installerOutDir)\n\n    const distOptions = await this.computeEffectiveDistOptions(installerOutDir, packOptions, setupExeName)\n    await createWindowsInstaller(distOptions)\n    this.packager.dispatchArtifactCreated(path.join(installerOutDir, setupExeName), `${this.packager.metadata.name}-Setup-${version}${archSuffix}.exe`)\n\n    const packagePrefix = `${this.packager.metadata.name}-${convertVersion(version)}-`\n    this.packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}full.nupkg`))\n    if (distOptions.remoteReleases != null) {\n      this.packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}delta.nupkg`))\n    }\n\n    this.packager.dispatchArtifactCreated(path.join(installerOutDir, \"RELEASES\"))\n  }\n\n  async computeEffectiveDistOptions(installerOutDir: string, packOptions: ElectronPackagerOptions, setupExeName: string): Promise<WinBuildOptions> {\n    const packager = this.packager\n    let iconUrl = packager.customBuildOptions.iconUrl || packager.devMetadata.build.iconUrl\n    if (iconUrl == null) {\n      if (packager.info.repositoryInfo != null) {\n        const info = await packager.info.repositoryInfo.getInfo(packager)\n        if (info != null) {\n          iconUrl = `https://github.com/${info.user}/${info.project}/blob/master/${packager.relativeBuildResourcesDirname}/icon.ico?raw=true`\n        }\n      }\n\n      if (iconUrl == null) {\n        throw new Error(\"iconUrl is not specified, please see https://github.com/electron-userland/electron-builder/wiki/Options#WinBuildOptions-iconUrl\")\n      }\n    }\n\n    checkConflictingOptions(packager.customBuildOptions)\n\n    const projectUrl = await packager.computePackageUrl()\n    const rceditOptions = {\n      \"version-string\": packOptions[\"version-string\"],\n      \"file-version\": packOptions[\"build-version\"],\n      \"product-version\": packOptions[\"app-version\"],\n    }\n    rceditOptions[\"version-string\"]!.LegalCopyright = packOptions[\"app-copyright\"]\n\n    const cscInfo = await packager.cscInfo\n    const options: any = Object.assign({\n      name: packager.metadata.name,\n      productName: packager.appName,\n      exe: packager.appName + \".exe\",\n      setupExe: setupExeName,\n      title: packager.appName,\n      appDirectory: this.appOutDir,\n      outputDirectory: installerOutDir,\n      version: packager.metadata.version,\n      description: smarten(packager.metadata.description),\n      authors: packager.metadata.author.name,\n      iconUrl: iconUrl,\n      setupIcon: await packager.iconPath,\n      certificateFile: cscInfo == null ? null : cscInfo.file,\n      certificatePassword: cscInfo == null ? null : cscInfo.password,\n      fixUpPaths: false,\n      skipUpdateIcon: true,\n      usePackageJson: false,\n      extraMetadataSpecs: projectUrl == null ? null : `\\n    <projectUrl>${projectUrl}</projectUrl>`,\n      copyright: packOptions[\"app-copyright\"],\n      packageCompressionLevel: packager.devMetadata.build.compression === \"store\" ? 0 : 9,\n      sign: {\n        name: packager.appName,\n        site: projectUrl,\n        overwrite: true,\n        hash: packager.customBuildOptions.signingHashAlgorithms,\n      },\n      rcedit: rceditOptions,\n    }, packager.customBuildOptions)\n\n    if (!(\"loadingGif\" in options)) {\n      const resourceList = await packager.resourceList\n      if (resourceList.includes(\"install-spinner.gif\")) {\n        options.loadingGif = path.join(packager.buildResourcesDir, \"install-spinner.gif\")\n      }\n    }\n\n    return options\n  }\n}\n\nfunction checkConflictingOptions(options: any) {\n  for (let name of [\"outputDirectory\", \"appDirectory\", \"exe\", \"fixUpPaths\", \"usePackageJson\", \"extraFileSpecs\", \"extraMetadataSpecs\", \"skipUpdateIcon\", \"setupExe\"]) {\n    if (name in options) {\n      throw new Error(`Option ${name} is ignored, do not specify it.`)\n    }\n  }\n\n  if (\"noMsi\" in options) {\n    warn(`noMsi is deprecated, please specify as \"msi\": true if you want to create an MSI installer`)\n    options.msi = !options.noMsi\n  }\n\n  const msi = options.msi\n  if (msi != null && typeof msi !== \"boolean\") {\n    throw new Error(`msi expected to be boolean value, but string '\"${msi}\"' was specified`)\n  }\n}"
  ]
}
